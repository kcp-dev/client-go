/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	coordinationv1 "k8s.io/api/coordination/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscoordinationv1 "k8s.io/client-go/listers/coordination/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// LeaseClusterLister helps list Leases across all workspaces,
// or scope down to a LeaseLister for one workspace.
// All objects returned here must be treated as read-only.
type LeaseClusterLister interface {
	// List lists all Leases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*coordinationv1.Lease, err error)
	// Cluster returns a lister that can list and get Leases in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscoordinationv1.LeaseLister
	LeaseClusterListerExpansion
}

// leaseClusterLister implements the LeaseClusterLister interface.
type leaseClusterLister struct {
	kcplisters.ResourceClusterIndexer[*coordinationv1.Lease]
}

var _ LeaseClusterLister = new(leaseClusterLister)

// NewLeaseClusterLister returns a new LeaseClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLeaseClusterLister(indexer cache.Indexer) LeaseClusterLister {
	return &leaseClusterLister{
		kcplisters.NewCluster[*coordinationv1.Lease](indexer, coordinationv1.Resource("lease")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Leases.
func (l *leaseClusterLister) Cluster(clusterName logicalcluster.Name) listerscoordinationv1.LeaseLister {
	return &leaseLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// leaseLister can list all Leases inside a workspace
// or scope down to a listerscoordinationv1.LeaseNamespaceLister for one namespace.
type leaseLister struct {
	kcplisters.ResourceIndexer[*coordinationv1.Lease]
}

var _ listerscoordinationv1.LeaseLister = new(leaseLister)

// Leases returns an object that can list and get Leases in one namespace.
func (l *leaseLister) Leases(namespace string) listerscoordinationv1.LeaseNamespaceLister {
	return &leaseNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// leaseNamespaceLister implements the listerscoordinationv1.LeaseNamespaceLister
// interface.
type leaseNamespaceLister struct {
	kcplisters.ResourceIndexer[*coordinationv1.Lease]
}

var _ listerscoordinationv1.LeaseNamespaceLister = new(leaseNamespaceLister)

// NewLeaseLister returns a new LeaseLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLeaseLister(indexer cache.Indexer) listerscoordinationv1.LeaseLister {
	return &leaseLister{
		kcplisters.New[*coordinationv1.Lease](indexer, coordinationv1.Resource("lease")),
	}
}

// leaseScopedLister can list all Leases inside a workspace
// or scope down to a listerscoordinationv1.LeaseNamespaceLister for one namespace.
type leaseScopedLister struct {
	kcplisters.ResourceIndexer[*coordinationv1.Lease]
}

// Leases returns an object that can list and get Leases in one namespace.
func (l *leaseScopedLister) Leases(namespace string) listerscoordinationv1.LeaseLister {
	return &leaseLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
