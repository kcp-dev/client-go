/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha2

import (
	coordinationv1alpha2 "k8s.io/api/coordination/v1alpha2"
	"k8s.io/apimachinery/pkg/labels"
	listerscoordinationv1alpha2 "k8s.io/client-go/listers/coordination/v1alpha2"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// LeaseCandidateClusterLister helps list LeaseCandidates across all workspaces,
// or scope down to a LeaseCandidateLister for one workspace.
// All objects returned here must be treated as read-only.
type LeaseCandidateClusterLister interface {
	// List lists all LeaseCandidates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*coordinationv1alpha2.LeaseCandidate, err error)
	// Cluster returns a lister that can list and get LeaseCandidates in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscoordinationv1alpha2.LeaseCandidateLister
	LeaseCandidateClusterListerExpansion
}

// leaseCandidateClusterLister implements the LeaseCandidateClusterLister interface.
type leaseCandidateClusterLister struct {
	kcplisters.ResourceClusterIndexer[*coordinationv1alpha2.LeaseCandidate]
}

var _ LeaseCandidateClusterLister = new(leaseCandidateClusterLister)

// NewLeaseCandidateClusterLister returns a new LeaseCandidateClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLeaseCandidateClusterLister(indexer cache.Indexer) LeaseCandidateClusterLister {
	return &leaseCandidateClusterLister{
		kcplisters.NewCluster[*coordinationv1alpha2.LeaseCandidate](indexer, coordinationv1alpha2.Resource("leasecandidate")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get LeaseCandidates.
func (l *leaseCandidateClusterLister) Cluster(clusterName logicalcluster.Name) listerscoordinationv1alpha2.LeaseCandidateLister {
	return &leaseCandidateLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// leaseCandidateLister can list all LeaseCandidates inside a workspace
// or scope down to a listerscoordinationv1alpha2.LeaseCandidateNamespaceLister for one namespace.
type leaseCandidateLister struct {
	kcplisters.ResourceIndexer[*coordinationv1alpha2.LeaseCandidate]
}

var _ listerscoordinationv1alpha2.LeaseCandidateLister = new(leaseCandidateLister)

// LeaseCandidates returns an object that can list and get LeaseCandidates in one namespace.
func (l *leaseCandidateLister) LeaseCandidates(namespace string) listerscoordinationv1alpha2.LeaseCandidateNamespaceLister {
	return &leaseCandidateNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// leaseCandidateNamespaceLister implements the listerscoordinationv1alpha2.LeaseCandidateNamespaceLister
// interface.
type leaseCandidateNamespaceLister struct {
	kcplisters.ResourceIndexer[*coordinationv1alpha2.LeaseCandidate]
}

var _ listerscoordinationv1alpha2.LeaseCandidateNamespaceLister = new(leaseCandidateNamespaceLister)

// NewLeaseCandidateLister returns a new LeaseCandidateLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLeaseCandidateLister(indexer cache.Indexer) listerscoordinationv1alpha2.LeaseCandidateLister {
	return &leaseCandidateLister{
		kcplisters.New[*coordinationv1alpha2.LeaseCandidate](indexer, coordinationv1alpha2.Resource("leasecandidate")),
	}
}

// leaseCandidateScopedLister can list all LeaseCandidates inside a workspace
// or scope down to a listerscoordinationv1alpha2.LeaseCandidateNamespaceLister for one namespace.
type leaseCandidateScopedLister struct {
	kcplisters.ResourceIndexer[*coordinationv1alpha2.LeaseCandidate]
}

// LeaseCandidates returns an object that can list and get LeaseCandidates in one namespace.
func (l *leaseCandidateScopedLister) LeaseCandidates(namespace string) listerscoordinationv1alpha2.LeaseCandidateLister {
	return &leaseCandidateLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
