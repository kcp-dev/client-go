/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ConfigMapClusterLister helps list ConfigMaps across all workspaces,
// or scope down to a ConfigMapLister for one workspace.
// All objects returned here must be treated as read-only.
type ConfigMapClusterLister interface {
	// List lists all ConfigMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ConfigMap, err error)
	// Cluster returns a lister that can list and get ConfigMaps in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.ConfigMapLister
	ConfigMapClusterListerExpansion
}

// configMapClusterLister implements the ConfigMapClusterLister interface.
type configMapClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.ConfigMap]
}

var _ ConfigMapClusterLister = new(configMapClusterLister)

// NewConfigMapClusterLister returns a new ConfigMapClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewConfigMapClusterLister(indexer cache.Indexer) ConfigMapClusterLister {
	return &configMapClusterLister{
		kcplisters.NewCluster[*corev1.ConfigMap](indexer, corev1.Resource("configmap")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ConfigMaps.
func (l *configMapClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.ConfigMapLister {
	return &configMapLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// configMapLister can list all ConfigMaps inside a workspace
// or scope down to a listerscorev1.ConfigMapNamespaceLister for one namespace.
type configMapLister struct {
	kcplisters.ResourceIndexer[*corev1.ConfigMap]
}

var _ listerscorev1.ConfigMapLister = new(configMapLister)

// ConfigMaps returns an object that can list and get ConfigMaps in one namespace.
func (l *configMapLister) ConfigMaps(namespace string) listerscorev1.ConfigMapNamespaceLister {
	return &configMapNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// configMapNamespaceLister implements the listerscorev1.ConfigMapNamespaceLister
// interface.
type configMapNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.ConfigMap]
}

var _ listerscorev1.ConfigMapNamespaceLister = new(configMapNamespaceLister)

// NewConfigMapLister returns a new ConfigMapLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewConfigMapLister(indexer cache.Indexer) listerscorev1.ConfigMapLister {
	return &configMapLister{
		kcplisters.New[*corev1.ConfigMap](indexer, corev1.Resource("configmap")),
	}
}

// configMapScopedLister can list all ConfigMaps inside a workspace
// or scope down to a listerscorev1.ConfigMapNamespaceLister for one namespace.
type configMapScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.ConfigMap]
}

// ConfigMaps returns an object that can list and get ConfigMaps in one namespace.
func (l *configMapScopedLister) ConfigMaps(namespace string) listerscorev1.ConfigMapLister {
	return &configMapLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
