/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// PersistentVolumeClaimClusterLister helps list PersistentVolumeClaims across all workspaces,
// or scope down to a PersistentVolumeClaimLister for one workspace.
// All objects returned here must be treated as read-only.
type PersistentVolumeClaimClusterLister interface {
	// List lists all PersistentVolumeClaims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.PersistentVolumeClaim, err error)
	// Cluster returns a lister that can list and get PersistentVolumeClaims in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.PersistentVolumeClaimLister
	PersistentVolumeClaimClusterListerExpansion
}

// persistentVolumeClaimClusterLister implements the PersistentVolumeClaimClusterLister interface.
type persistentVolumeClaimClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.PersistentVolumeClaim]
}

var _ PersistentVolumeClaimClusterLister = new(persistentVolumeClaimClusterLister)

// NewPersistentVolumeClaimClusterLister returns a new PersistentVolumeClaimClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPersistentVolumeClaimClusterLister(indexer cache.Indexer) PersistentVolumeClaimClusterLister {
	return &persistentVolumeClaimClusterLister{
		kcplisters.NewCluster[*corev1.PersistentVolumeClaim](indexer, corev1.Resource("persistentvolumeclaim")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get PersistentVolumeClaims.
func (l *persistentVolumeClaimClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.PersistentVolumeClaimLister {
	return &persistentVolumeClaimLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// persistentVolumeClaimLister can list all PersistentVolumeClaims inside a workspace
// or scope down to a listerscorev1.PersistentVolumeClaimNamespaceLister for one namespace.
type persistentVolumeClaimLister struct {
	kcplisters.ResourceIndexer[*corev1.PersistentVolumeClaim]
}

var _ listerscorev1.PersistentVolumeClaimLister = new(persistentVolumeClaimLister)

// PersistentVolumeClaims returns an object that can list and get PersistentVolumeClaims in one namespace.
func (l *persistentVolumeClaimLister) PersistentVolumeClaims(namespace string) listerscorev1.PersistentVolumeClaimNamespaceLister {
	return &persistentVolumeClaimNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// persistentVolumeClaimNamespaceLister implements the listerscorev1.PersistentVolumeClaimNamespaceLister
// interface.
type persistentVolumeClaimNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.PersistentVolumeClaim]
}

var _ listerscorev1.PersistentVolumeClaimNamespaceLister = new(persistentVolumeClaimNamespaceLister)

// NewPersistentVolumeClaimLister returns a new PersistentVolumeClaimLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPersistentVolumeClaimLister(indexer cache.Indexer) listerscorev1.PersistentVolumeClaimLister {
	return &persistentVolumeClaimLister{
		kcplisters.New[*corev1.PersistentVolumeClaim](indexer, corev1.Resource("persistentvolumeclaim")),
	}
}

// persistentVolumeClaimScopedLister can list all PersistentVolumeClaims inside a workspace
// or scope down to a listerscorev1.PersistentVolumeClaimNamespaceLister for one namespace.
type persistentVolumeClaimScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.PersistentVolumeClaim]
}

// PersistentVolumeClaims returns an object that can list and get PersistentVolumeClaims in one namespace.
func (l *persistentVolumeClaimScopedLister) PersistentVolumeClaims(namespace string) listerscorev1.PersistentVolumeClaimLister {
	return &persistentVolumeClaimLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
