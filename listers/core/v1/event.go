/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// EventClusterLister helps list Events across all workspaces,
// or scope down to a EventLister for one workspace.
// All objects returned here must be treated as read-only.
type EventClusterLister interface {
	// List lists all Events in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Event, err error)
	// Cluster returns a lister that can list and get Events in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.EventLister
	EventClusterListerExpansion
}

// eventClusterLister implements the EventClusterLister interface.
type eventClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Event]
}

var _ EventClusterLister = new(eventClusterLister)

// NewEventClusterLister returns a new EventClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEventClusterLister(indexer cache.Indexer) EventClusterLister {
	return &eventClusterLister{
		kcplisters.NewCluster[*corev1.Event](indexer, corev1.Resource("event")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Events.
func (l *eventClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.EventLister {
	return &eventLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// eventLister can list all Events inside a workspace
// or scope down to a listerscorev1.EventNamespaceLister for one namespace.
type eventLister struct {
	kcplisters.ResourceIndexer[*corev1.Event]
}

var _ listerscorev1.EventLister = new(eventLister)

// Events returns an object that can list and get Events in one namespace.
func (l *eventLister) Events(namespace string) listerscorev1.EventNamespaceLister {
	return &eventNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// eventNamespaceLister implements the listerscorev1.EventNamespaceLister
// interface.
type eventNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.Event]
}

var _ listerscorev1.EventNamespaceLister = new(eventNamespaceLister)

// NewEventLister returns a new EventLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEventLister(indexer cache.Indexer) listerscorev1.EventLister {
	return &eventLister{
		kcplisters.New[*corev1.Event](indexer, corev1.Resource("event")),
	}
}

// eventScopedLister can list all Events inside a workspace
// or scope down to a listerscorev1.EventNamespaceLister for one namespace.
type eventScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Event]
}

// Events returns an object that can list and get Events in one namespace.
func (l *eventScopedLister) Events(namespace string) listerscorev1.EventLister {
	return &eventLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
