/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// NodeClusterLister helps list Nodes across all workspaces,
// or scope down to a NodeLister for one workspace.
// All objects returned here must be treated as read-only.
type NodeClusterLister interface {
	// List lists all Nodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Node, err error)
	// Cluster returns a lister that can list and get Nodes in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.NodeLister
	NodeClusterListerExpansion
}

// nodeClusterLister implements the NodeClusterLister interface.
type nodeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Node]
}

var _ NodeClusterLister = new(nodeClusterLister)

// NewNodeClusterLister returns a new NodeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewNodeClusterLister(indexer cache.Indexer) NodeClusterLister {
	return &nodeClusterLister{
		kcplisters.NewCluster[*corev1.Node](indexer, corev1.Resource("node")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Nodes.
func (l *nodeClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.NodeLister {
	return &nodeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// nodeLister can list all Nodes inside a workspace
// or scope down to a listerscorev1.NodeNamespaceLister for one namespace.
type nodeLister struct {
	kcplisters.ResourceIndexer[*corev1.Node]
}

var _ listerscorev1.NodeLister = new(nodeLister)

// NewNodeLister returns a new NodeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewNodeLister(indexer cache.Indexer) listerscorev1.NodeLister {
	return &nodeLister{
		kcplisters.New[*corev1.Node](indexer, corev1.Resource("node")),
	}
}

// nodeScopedLister can list all Nodes inside a workspace
// or scope down to a listerscorev1.NodeNamespaceLister.
type nodeScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Node]
}
