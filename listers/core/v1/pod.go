/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// PodClusterLister helps list Pods across all workspaces,
// or scope down to a PodLister for one workspace.
// All objects returned here must be treated as read-only.
type PodClusterLister interface {
	// List lists all Pods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Pod, err error)
	// Cluster returns a lister that can list and get Pods in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.PodLister
	PodClusterListerExpansion
}

// podClusterLister implements the PodClusterLister interface.
type podClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Pod]
}

var _ PodClusterLister = new(podClusterLister)

// NewPodClusterLister returns a new PodClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodClusterLister(indexer cache.Indexer) PodClusterLister {
	return &podClusterLister{
		kcplisters.NewCluster[*corev1.Pod](indexer, corev1.Resource("pod")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Pods.
func (l *podClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.PodLister {
	return &podLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// podLister can list all Pods inside a workspace
// or scope down to a listerscorev1.PodNamespaceLister for one namespace.
type podLister struct {
	kcplisters.ResourceIndexer[*corev1.Pod]
}

var _ listerscorev1.PodLister = new(podLister)

// Pods returns an object that can list and get Pods in one namespace.
func (l *podLister) Pods(namespace string) listerscorev1.PodNamespaceLister {
	return &podNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// podNamespaceLister implements the listerscorev1.PodNamespaceLister
// interface.
type podNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.Pod]
}

var _ listerscorev1.PodNamespaceLister = new(podNamespaceLister)

// NewPodLister returns a new PodLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodLister(indexer cache.Indexer) listerscorev1.PodLister {
	return &podLister{
		kcplisters.New[*corev1.Pod](indexer, corev1.Resource("pod")),
	}
}

// podScopedLister can list all Pods inside a workspace
// or scope down to a listerscorev1.PodNamespaceLister for one namespace.
type podScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Pod]
}

// Pods returns an object that can list and get Pods in one namespace.
func (l *podScopedLister) Pods(namespace string) listerscorev1.PodLister {
	return &podLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
