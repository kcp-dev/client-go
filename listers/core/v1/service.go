/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ServiceClusterLister helps list Services across all workspaces,
// or scope down to a ServiceLister for one workspace.
// All objects returned here must be treated as read-only.
type ServiceClusterLister interface {
	// List lists all Services in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Service, err error)
	// Cluster returns a lister that can list and get Services in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.ServiceLister
	ServiceClusterListerExpansion
}

// serviceClusterLister implements the ServiceClusterLister interface.
type serviceClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Service]
}

var _ ServiceClusterLister = new(serviceClusterLister)

// NewServiceClusterLister returns a new ServiceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewServiceClusterLister(indexer cache.Indexer) ServiceClusterLister {
	return &serviceClusterLister{
		kcplisters.NewCluster[*corev1.Service](indexer, corev1.Resource("service")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Services.
func (l *serviceClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.ServiceLister {
	return &serviceLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// serviceLister can list all Services inside a workspace
// or scope down to a listerscorev1.ServiceNamespaceLister for one namespace.
type serviceLister struct {
	kcplisters.ResourceIndexer[*corev1.Service]
}

var _ listerscorev1.ServiceLister = new(serviceLister)

// Services returns an object that can list and get Services in one namespace.
func (l *serviceLister) Services(namespace string) listerscorev1.ServiceNamespaceLister {
	return &serviceNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// serviceNamespaceLister implements the listerscorev1.ServiceNamespaceLister
// interface.
type serviceNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.Service]
}

var _ listerscorev1.ServiceNamespaceLister = new(serviceNamespaceLister)

// NewServiceLister returns a new ServiceLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewServiceLister(indexer cache.Indexer) listerscorev1.ServiceLister {
	return &serviceLister{
		kcplisters.New[*corev1.Service](indexer, corev1.Resource("service")),
	}
}

// serviceScopedLister can list all Services inside a workspace
// or scope down to a listerscorev1.ServiceNamespaceLister for one namespace.
type serviceScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Service]
}

// Services returns an object that can list and get Services in one namespace.
func (l *serviceScopedLister) Services(namespace string) listerscorev1.ServiceLister {
	return &serviceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
