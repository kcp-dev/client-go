/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// PodTemplateClusterLister helps list PodTemplates across all workspaces,
// or scope down to a PodTemplateLister for one workspace.
// All objects returned here must be treated as read-only.
type PodTemplateClusterLister interface {
	// List lists all PodTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.PodTemplate, err error)
	// Cluster returns a lister that can list and get PodTemplates in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.PodTemplateLister
	PodTemplateClusterListerExpansion
}

// podTemplateClusterLister implements the PodTemplateClusterLister interface.
type podTemplateClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.PodTemplate]
}

var _ PodTemplateClusterLister = new(podTemplateClusterLister)

// NewPodTemplateClusterLister returns a new PodTemplateClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodTemplateClusterLister(indexer cache.Indexer) PodTemplateClusterLister {
	return &podTemplateClusterLister{
		kcplisters.NewCluster[*corev1.PodTemplate](indexer, corev1.Resource("podtemplate")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get PodTemplates.
func (l *podTemplateClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.PodTemplateLister {
	return &podTemplateLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// podTemplateLister can list all PodTemplates inside a workspace
// or scope down to a listerscorev1.PodTemplateNamespaceLister for one namespace.
type podTemplateLister struct {
	kcplisters.ResourceIndexer[*corev1.PodTemplate]
}

var _ listerscorev1.PodTemplateLister = new(podTemplateLister)

// PodTemplates returns an object that can list and get PodTemplates in one namespace.
func (l *podTemplateLister) PodTemplates(namespace string) listerscorev1.PodTemplateNamespaceLister {
	return &podTemplateNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// podTemplateNamespaceLister implements the listerscorev1.PodTemplateNamespaceLister
// interface.
type podTemplateNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.PodTemplate]
}

var _ listerscorev1.PodTemplateNamespaceLister = new(podTemplateNamespaceLister)

// NewPodTemplateLister returns a new PodTemplateLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodTemplateLister(indexer cache.Indexer) listerscorev1.PodTemplateLister {
	return &podTemplateLister{
		kcplisters.New[*corev1.PodTemplate](indexer, corev1.Resource("podtemplate")),
	}
}

// podTemplateScopedLister can list all PodTemplates inside a workspace
// or scope down to a listerscorev1.PodTemplateNamespaceLister for one namespace.
type podTemplateScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.PodTemplate]
}

// PodTemplates returns an object that can list and get PodTemplates in one namespace.
func (l *podTemplateScopedLister) PodTemplates(namespace string) listerscorev1.PodTemplateLister {
	return &podTemplateLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
