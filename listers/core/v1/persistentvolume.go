/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// PersistentVolumeClusterLister helps list PersistentVolumes across all workspaces,
// or scope down to a PersistentVolumeLister for one workspace.
// All objects returned here must be treated as read-only.
type PersistentVolumeClusterLister interface {
	// List lists all PersistentVolumes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.PersistentVolume, err error)
	// Cluster returns a lister that can list and get PersistentVolumes in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.PersistentVolumeLister
	PersistentVolumeClusterListerExpansion
}

// persistentVolumeClusterLister implements the PersistentVolumeClusterLister interface.
type persistentVolumeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.PersistentVolume]
}

var _ PersistentVolumeClusterLister = new(persistentVolumeClusterLister)

// NewPersistentVolumeClusterLister returns a new PersistentVolumeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPersistentVolumeClusterLister(indexer cache.Indexer) PersistentVolumeClusterLister {
	return &persistentVolumeClusterLister{
		kcplisters.NewCluster[*corev1.PersistentVolume](indexer, corev1.Resource("persistentvolume")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get PersistentVolumes.
func (l *persistentVolumeClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.PersistentVolumeLister {
	return &persistentVolumeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// persistentVolumeLister can list all PersistentVolumes inside a workspace
// or scope down to a listerscorev1.PersistentVolumeNamespaceLister for one namespace.
type persistentVolumeLister struct {
	kcplisters.ResourceIndexer[*corev1.PersistentVolume]
}

var _ listerscorev1.PersistentVolumeLister = new(persistentVolumeLister)

// NewPersistentVolumeLister returns a new PersistentVolumeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPersistentVolumeLister(indexer cache.Indexer) listerscorev1.PersistentVolumeLister {
	return &persistentVolumeLister{
		kcplisters.New[*corev1.PersistentVolume](indexer, corev1.Resource("persistentvolume")),
	}
}

// persistentVolumeScopedLister can list all PersistentVolumes inside a workspace
// or scope down to a listerscorev1.PersistentVolumeNamespaceLister.
type persistentVolumeScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.PersistentVolume]
}
