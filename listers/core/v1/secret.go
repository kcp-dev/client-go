/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// SecretClusterLister helps list Secrets across all workspaces,
// or scope down to a SecretLister for one workspace.
// All objects returned here must be treated as read-only.
type SecretClusterLister interface {
	// List lists all Secrets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Secret, err error)
	// Cluster returns a lister that can list and get Secrets in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.SecretLister
	SecretClusterListerExpansion
}

// secretClusterLister implements the SecretClusterLister interface.
type secretClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Secret]
}

var _ SecretClusterLister = new(secretClusterLister)

// NewSecretClusterLister returns a new SecretClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewSecretClusterLister(indexer cache.Indexer) SecretClusterLister {
	return &secretClusterLister{
		kcplisters.NewCluster[*corev1.Secret](indexer, corev1.Resource("secret")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Secrets.
func (l *secretClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.SecretLister {
	return &secretLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// secretLister can list all Secrets inside a workspace
// or scope down to a listerscorev1.SecretNamespaceLister for one namespace.
type secretLister struct {
	kcplisters.ResourceIndexer[*corev1.Secret]
}

var _ listerscorev1.SecretLister = new(secretLister)

// Secrets returns an object that can list and get Secrets in one namespace.
func (l *secretLister) Secrets(namespace string) listerscorev1.SecretNamespaceLister {
	return &secretNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// secretNamespaceLister implements the listerscorev1.SecretNamespaceLister
// interface.
type secretNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.Secret]
}

var _ listerscorev1.SecretNamespaceLister = new(secretNamespaceLister)

// NewSecretLister returns a new SecretLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewSecretLister(indexer cache.Indexer) listerscorev1.SecretLister {
	return &secretLister{
		kcplisters.New[*corev1.Secret](indexer, corev1.Resource("secret")),
	}
}

// secretScopedLister can list all Secrets inside a workspace
// or scope down to a listerscorev1.SecretNamespaceLister for one namespace.
type secretScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Secret]
}

// Secrets returns an object that can list and get Secrets in one namespace.
func (l *secretScopedLister) Secrets(namespace string) listerscorev1.SecretLister {
	return &secretLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
