/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ResourceQuotaClusterLister helps list ResourceQuotas across all workspaces,
// or scope down to a ResourceQuotaLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceQuotaClusterLister interface {
	// List lists all ResourceQuotas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ResourceQuota, err error)
	// Cluster returns a lister that can list and get ResourceQuotas in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.ResourceQuotaLister
	ResourceQuotaClusterListerExpansion
}

// resourceQuotaClusterLister implements the ResourceQuotaClusterLister interface.
type resourceQuotaClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.ResourceQuota]
}

var _ ResourceQuotaClusterLister = new(resourceQuotaClusterLister)

// NewResourceQuotaClusterLister returns a new ResourceQuotaClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceQuotaClusterLister(indexer cache.Indexer) ResourceQuotaClusterLister {
	return &resourceQuotaClusterLister{
		kcplisters.NewCluster[*corev1.ResourceQuota](indexer, corev1.Resource("resourcequota")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceQuotas.
func (l *resourceQuotaClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.ResourceQuotaLister {
	return &resourceQuotaLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// resourceQuotaLister can list all ResourceQuotas inside a workspace
// or scope down to a listerscorev1.ResourceQuotaNamespaceLister for one namespace.
type resourceQuotaLister struct {
	kcplisters.ResourceIndexer[*corev1.ResourceQuota]
}

var _ listerscorev1.ResourceQuotaLister = new(resourceQuotaLister)

// ResourceQuotas returns an object that can list and get ResourceQuotas in one namespace.
func (l *resourceQuotaLister) ResourceQuotas(namespace string) listerscorev1.ResourceQuotaNamespaceLister {
	return &resourceQuotaNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// resourceQuotaNamespaceLister implements the listerscorev1.ResourceQuotaNamespaceLister
// interface.
type resourceQuotaNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.ResourceQuota]
}

var _ listerscorev1.ResourceQuotaNamespaceLister = new(resourceQuotaNamespaceLister)

// NewResourceQuotaLister returns a new ResourceQuotaLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceQuotaLister(indexer cache.Indexer) listerscorev1.ResourceQuotaLister {
	return &resourceQuotaLister{
		kcplisters.New[*corev1.ResourceQuota](indexer, corev1.Resource("resourcequota")),
	}
}

// resourceQuotaScopedLister can list all ResourceQuotas inside a workspace
// or scope down to a listerscorev1.ResourceQuotaNamespaceLister for one namespace.
type resourceQuotaScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.ResourceQuota]
}

// ResourceQuotas returns an object that can list and get ResourceQuotas in one namespace.
func (l *resourceQuotaScopedLister) ResourceQuotas(namespace string) listerscorev1.ResourceQuotaLister {
	return &resourceQuotaLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
