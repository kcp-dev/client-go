/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ReplicationControllerClusterLister helps list ReplicationControllers across all workspaces,
// or scope down to a ReplicationControllerLister for one workspace.
// All objects returned here must be treated as read-only.
type ReplicationControllerClusterLister interface {
	// List lists all ReplicationControllers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ReplicationController, err error)
	// Cluster returns a lister that can list and get ReplicationControllers in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.ReplicationControllerLister
	ReplicationControllerClusterListerExpansion
}

// replicationControllerClusterLister implements the ReplicationControllerClusterLister interface.
type replicationControllerClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.ReplicationController]
}

var _ ReplicationControllerClusterLister = new(replicationControllerClusterLister)

// NewReplicationControllerClusterLister returns a new ReplicationControllerClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewReplicationControllerClusterLister(indexer cache.Indexer) ReplicationControllerClusterLister {
	return &replicationControllerClusterLister{
		kcplisters.NewCluster[*corev1.ReplicationController](indexer, corev1.Resource("replicationcontroller")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ReplicationControllers.
func (l *replicationControllerClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.ReplicationControllerLister {
	return &replicationControllerLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// replicationControllerLister can list all ReplicationControllers inside a workspace
// or scope down to a listerscorev1.ReplicationControllerNamespaceLister for one namespace.
type replicationControllerLister struct {
	kcplisters.ResourceIndexer[*corev1.ReplicationController]
}

var _ listerscorev1.ReplicationControllerLister = new(replicationControllerLister)

// ReplicationControllers returns an object that can list and get ReplicationControllers in one namespace.
func (l *replicationControllerLister) ReplicationControllers(namespace string) listerscorev1.ReplicationControllerNamespaceLister {
	return &replicationControllerNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// replicationControllerNamespaceLister implements the listerscorev1.ReplicationControllerNamespaceLister
// interface.
type replicationControllerNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.ReplicationController]
}

var _ listerscorev1.ReplicationControllerNamespaceLister = new(replicationControllerNamespaceLister)

// NewReplicationControllerLister returns a new ReplicationControllerLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewReplicationControllerLister(indexer cache.Indexer) listerscorev1.ReplicationControllerLister {
	return &replicationControllerLister{
		kcplisters.New[*corev1.ReplicationController](indexer, corev1.Resource("replicationcontroller")),
	}
}

// replicationControllerScopedLister can list all ReplicationControllers inside a workspace
// or scope down to a listerscorev1.ReplicationControllerNamespaceLister for one namespace.
type replicationControllerScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.ReplicationController]
}

// ReplicationControllers returns an object that can list and get ReplicationControllers in one namespace.
func (l *replicationControllerScopedLister) ReplicationControllers(namespace string) listerscorev1.ReplicationControllerLister {
	return &replicationControllerLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
