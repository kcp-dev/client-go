/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// NamespaceClusterLister helps list Namespaces across all workspaces,
// or scope down to a NamespaceLister for one workspace.
// All objects returned here must be treated as read-only.
type NamespaceClusterLister interface {
	// List lists all Namespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Namespace, err error)
	// Cluster returns a lister that can list and get Namespaces in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.NamespaceLister
	NamespaceClusterListerExpansion
}

// namespaceClusterLister implements the NamespaceClusterLister interface.
type namespaceClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Namespace]
}

var _ NamespaceClusterLister = new(namespaceClusterLister)

// NewNamespaceClusterLister returns a new NamespaceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewNamespaceClusterLister(indexer cache.Indexer) NamespaceClusterLister {
	return &namespaceClusterLister{
		kcplisters.NewCluster[*corev1.Namespace](indexer, corev1.Resource("namespace")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Namespaces.
func (l *namespaceClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.NamespaceLister {
	return &namespaceLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// namespaceLister can list all Namespaces inside a workspace
// or scope down to a listerscorev1.NamespaceNamespaceLister for one namespace.
type namespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.Namespace]
}

var _ listerscorev1.NamespaceLister = new(namespaceLister)

// NewNamespaceLister returns a new NamespaceLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewNamespaceLister(indexer cache.Indexer) listerscorev1.NamespaceLister {
	return &namespaceLister{
		kcplisters.New[*corev1.Namespace](indexer, corev1.Resource("namespace")),
	}
}

// namespaceScopedLister can list all Namespaces inside a workspace
// or scope down to a listerscorev1.NamespaceNamespaceLister.
type namespaceScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Namespace]
}
