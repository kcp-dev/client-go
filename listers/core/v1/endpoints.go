/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// EndpointsClusterLister helps list Endpoints across all workspaces,
// or scope down to a EndpointsLister for one workspace.
// All objects returned here must be treated as read-only.
type EndpointsClusterLister interface {
	// List lists all Endpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.Endpoints, err error)
	// Cluster returns a lister that can list and get Endpoints in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.EndpointsLister
	EndpointsClusterListerExpansion
}

// endpointsClusterLister implements the EndpointsClusterLister interface.
type endpointsClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.Endpoints]
}

var _ EndpointsClusterLister = new(endpointsClusterLister)

// NewEndpointsClusterLister returns a new EndpointsClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEndpointsClusterLister(indexer cache.Indexer) EndpointsClusterLister {
	return &endpointsClusterLister{
		kcplisters.NewCluster[*corev1.Endpoints](indexer, corev1.Resource("endpoints")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Endpoints.
func (l *endpointsClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.EndpointsLister {
	return &endpointsLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// endpointsLister can list all Endpoints inside a workspace
// or scope down to a listerscorev1.EndpointsNamespaceLister for one namespace.
type endpointsLister struct {
	kcplisters.ResourceIndexer[*corev1.Endpoints]
}

var _ listerscorev1.EndpointsLister = new(endpointsLister)

// Endpoints returns an object that can list and get Endpoints in one namespace.
func (l *endpointsLister) Endpoints(namespace string) listerscorev1.EndpointsNamespaceLister {
	return &endpointsNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// endpointsNamespaceLister implements the listerscorev1.EndpointsNamespaceLister
// interface.
type endpointsNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.Endpoints]
}

var _ listerscorev1.EndpointsNamespaceLister = new(endpointsNamespaceLister)

// NewEndpointsLister returns a new EndpointsLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEndpointsLister(indexer cache.Indexer) listerscorev1.EndpointsLister {
	return &endpointsLister{
		kcplisters.New[*corev1.Endpoints](indexer, corev1.Resource("endpoints")),
	}
}

// endpointsScopedLister can list all Endpoints inside a workspace
// or scope down to a listerscorev1.EndpointsNamespaceLister for one namespace.
type endpointsScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.Endpoints]
}

// Endpoints returns an object that can list and get Endpoints in one namespace.
func (l *endpointsScopedLister) Endpoints(namespace string) listerscorev1.EndpointsLister {
	return &endpointsLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
