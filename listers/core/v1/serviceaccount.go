/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ServiceAccountClusterLister helps list ServiceAccounts across all workspaces,
// or scope down to a ServiceAccountLister for one workspace.
// All objects returned here must be treated as read-only.
type ServiceAccountClusterLister interface {
	// List lists all ServiceAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ServiceAccount, err error)
	// Cluster returns a lister that can list and get ServiceAccounts in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.ServiceAccountLister
	ServiceAccountClusterListerExpansion
}

// serviceAccountClusterLister implements the ServiceAccountClusterLister interface.
type serviceAccountClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.ServiceAccount]
}

var _ ServiceAccountClusterLister = new(serviceAccountClusterLister)

// NewServiceAccountClusterLister returns a new ServiceAccountClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewServiceAccountClusterLister(indexer cache.Indexer) ServiceAccountClusterLister {
	return &serviceAccountClusterLister{
		kcplisters.NewCluster[*corev1.ServiceAccount](indexer, corev1.Resource("serviceaccount")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ServiceAccounts.
func (l *serviceAccountClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.ServiceAccountLister {
	return &serviceAccountLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// serviceAccountLister can list all ServiceAccounts inside a workspace
// or scope down to a listerscorev1.ServiceAccountNamespaceLister for one namespace.
type serviceAccountLister struct {
	kcplisters.ResourceIndexer[*corev1.ServiceAccount]
}

var _ listerscorev1.ServiceAccountLister = new(serviceAccountLister)

// ServiceAccounts returns an object that can list and get ServiceAccounts in one namespace.
func (l *serviceAccountLister) ServiceAccounts(namespace string) listerscorev1.ServiceAccountNamespaceLister {
	return &serviceAccountNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// serviceAccountNamespaceLister implements the listerscorev1.ServiceAccountNamespaceLister
// interface.
type serviceAccountNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.ServiceAccount]
}

var _ listerscorev1.ServiceAccountNamespaceLister = new(serviceAccountNamespaceLister)

// NewServiceAccountLister returns a new ServiceAccountLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewServiceAccountLister(indexer cache.Indexer) listerscorev1.ServiceAccountLister {
	return &serviceAccountLister{
		kcplisters.New[*corev1.ServiceAccount](indexer, corev1.Resource("serviceaccount")),
	}
}

// serviceAccountScopedLister can list all ServiceAccounts inside a workspace
// or scope down to a listerscorev1.ServiceAccountNamespaceLister for one namespace.
type serviceAccountScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.ServiceAccount]
}

// ServiceAccounts returns an object that can list and get ServiceAccounts in one namespace.
func (l *serviceAccountScopedLister) ServiceAccounts(namespace string) listerscorev1.ServiceAccountLister {
	return &serviceAccountLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
