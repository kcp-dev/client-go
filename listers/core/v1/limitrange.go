/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// LimitRangeClusterLister helps list LimitRanges across all workspaces,
// or scope down to a LimitRangeLister for one workspace.
// All objects returned here must be treated as read-only.
type LimitRangeClusterLister interface {
	// List lists all LimitRanges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.LimitRange, err error)
	// Cluster returns a lister that can list and get LimitRanges in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.LimitRangeLister
	LimitRangeClusterListerExpansion
}

// limitRangeClusterLister implements the LimitRangeClusterLister interface.
type limitRangeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.LimitRange]
}

var _ LimitRangeClusterLister = new(limitRangeClusterLister)

// NewLimitRangeClusterLister returns a new LimitRangeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLimitRangeClusterLister(indexer cache.Indexer) LimitRangeClusterLister {
	return &limitRangeClusterLister{
		kcplisters.NewCluster[*corev1.LimitRange](indexer, corev1.Resource("limitrange")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get LimitRanges.
func (l *limitRangeClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.LimitRangeLister {
	return &limitRangeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// limitRangeLister can list all LimitRanges inside a workspace
// or scope down to a listerscorev1.LimitRangeNamespaceLister for one namespace.
type limitRangeLister struct {
	kcplisters.ResourceIndexer[*corev1.LimitRange]
}

var _ listerscorev1.LimitRangeLister = new(limitRangeLister)

// LimitRanges returns an object that can list and get LimitRanges in one namespace.
func (l *limitRangeLister) LimitRanges(namespace string) listerscorev1.LimitRangeNamespaceLister {
	return &limitRangeNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// limitRangeNamespaceLister implements the listerscorev1.LimitRangeNamespaceLister
// interface.
type limitRangeNamespaceLister struct {
	kcplisters.ResourceIndexer[*corev1.LimitRange]
}

var _ listerscorev1.LimitRangeNamespaceLister = new(limitRangeNamespaceLister)

// NewLimitRangeLister returns a new LimitRangeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewLimitRangeLister(indexer cache.Indexer) listerscorev1.LimitRangeLister {
	return &limitRangeLister{
		kcplisters.New[*corev1.LimitRange](indexer, corev1.Resource("limitrange")),
	}
}

// limitRangeScopedLister can list all LimitRanges inside a workspace
// or scope down to a listerscorev1.LimitRangeNamespaceLister for one namespace.
type limitRangeScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.LimitRange]
}

// LimitRanges returns an object that can list and get LimitRanges in one namespace.
func (l *limitRangeScopedLister) LimitRanges(namespace string) listerscorev1.LimitRangeLister {
	return &limitRangeLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
