/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/labels"
	listerscorev1 "k8s.io/client-go/listers/core/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ComponentStatusClusterLister helps list ComponentStatuses across all workspaces,
// or scope down to a ComponentStatusLister for one workspace.
// All objects returned here must be treated as read-only.
type ComponentStatusClusterLister interface {
	// List lists all ComponentStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*corev1.ComponentStatus, err error)
	// Cluster returns a lister that can list and get ComponentStatuses in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscorev1.ComponentStatusLister
	ComponentStatusClusterListerExpansion
}

// componentStatusClusterLister implements the ComponentStatusClusterLister interface.
type componentStatusClusterLister struct {
	kcplisters.ResourceClusterIndexer[*corev1.ComponentStatus]
}

var _ ComponentStatusClusterLister = new(componentStatusClusterLister)

// NewComponentStatusClusterLister returns a new ComponentStatusClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewComponentStatusClusterLister(indexer cache.Indexer) ComponentStatusClusterLister {
	return &componentStatusClusterLister{
		kcplisters.NewCluster[*corev1.ComponentStatus](indexer, corev1.Resource("componentstatus")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ComponentStatuses.
func (l *componentStatusClusterLister) Cluster(clusterName logicalcluster.Name) listerscorev1.ComponentStatusLister {
	return &componentStatusLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// componentStatusLister can list all ComponentStatuses inside a workspace
// or scope down to a listerscorev1.ComponentStatusNamespaceLister for one namespace.
type componentStatusLister struct {
	kcplisters.ResourceIndexer[*corev1.ComponentStatus]
}

var _ listerscorev1.ComponentStatusLister = new(componentStatusLister)

// NewComponentStatusLister returns a new ComponentStatusLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewComponentStatusLister(indexer cache.Indexer) listerscorev1.ComponentStatusLister {
	return &componentStatusLister{
		kcplisters.New[*corev1.ComponentStatus](indexer, corev1.Resource("componentstatus")),
	}
}

// componentStatusScopedLister can list all ComponentStatuses inside a workspace
// or scope down to a listerscorev1.ComponentStatusNamespaceLister.
type componentStatusScopedLister struct {
	kcplisters.ResourceIndexer[*corev1.ComponentStatus]
}
