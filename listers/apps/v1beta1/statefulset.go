/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	appsv1beta1 "k8s.io/api/apps/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersappsv1beta1 "k8s.io/client-go/listers/apps/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// StatefulSetClusterLister helps list StatefulSets across all workspaces,
// or scope down to a StatefulSetLister for one workspace.
// All objects returned here must be treated as read-only.
type StatefulSetClusterLister interface {
	// List lists all StatefulSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1beta1.StatefulSet, err error)
	// Cluster returns a lister that can list and get StatefulSets in one workspace.
	Cluster(clusterName logicalcluster.Name) listersappsv1beta1.StatefulSetLister
	StatefulSetClusterListerExpansion
}

// statefulSetClusterLister implements the StatefulSetClusterLister interface.
type statefulSetClusterLister struct {
	kcplisters.ResourceClusterIndexer[*appsv1beta1.StatefulSet]
}

var _ StatefulSetClusterLister = new(statefulSetClusterLister)

// NewStatefulSetClusterLister returns a new StatefulSetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewStatefulSetClusterLister(indexer cache.Indexer) StatefulSetClusterLister {
	return &statefulSetClusterLister{
		kcplisters.NewCluster[*appsv1beta1.StatefulSet](indexer, appsv1beta1.Resource("statefulset")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get StatefulSets.
func (l *statefulSetClusterLister) Cluster(clusterName logicalcluster.Name) listersappsv1beta1.StatefulSetLister {
	return &statefulSetLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// statefulSetLister can list all StatefulSets inside a workspace
// or scope down to a listersappsv1beta1.StatefulSetNamespaceLister for one namespace.
type statefulSetLister struct {
	kcplisters.ResourceIndexer[*appsv1beta1.StatefulSet]
}

var _ listersappsv1beta1.StatefulSetLister = new(statefulSetLister)

// StatefulSets returns an object that can list and get StatefulSets in one namespace.
func (l *statefulSetLister) StatefulSets(namespace string) listersappsv1beta1.StatefulSetNamespaceLister {
	return &statefulSetNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// statefulSetNamespaceLister implements the listersappsv1beta1.StatefulSetNamespaceLister
// interface.
type statefulSetNamespaceLister struct {
	kcplisters.ResourceIndexer[*appsv1beta1.StatefulSet]
}

var _ listersappsv1beta1.StatefulSetNamespaceLister = new(statefulSetNamespaceLister)

// NewStatefulSetLister returns a new StatefulSetLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewStatefulSetLister(indexer cache.Indexer) listersappsv1beta1.StatefulSetLister {
	return &statefulSetLister{
		kcplisters.New[*appsv1beta1.StatefulSet](indexer, appsv1beta1.Resource("statefulset")),
	}
}

// statefulSetScopedLister can list all StatefulSets inside a workspace
// or scope down to a listersappsv1beta1.StatefulSetNamespaceLister for one namespace.
type statefulSetScopedLister struct {
	kcplisters.ResourceIndexer[*appsv1beta1.StatefulSet]
}

// StatefulSets returns an object that can list and get StatefulSets in one namespace.
func (l *statefulSetScopedLister) StatefulSets(namespace string) listersappsv1beta1.StatefulSetLister {
	return &statefulSetLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
