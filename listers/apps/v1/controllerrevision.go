/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersappsv1 "k8s.io/client-go/listers/apps/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ControllerRevisionClusterLister helps list ControllerRevisions across all workspaces,
// or scope down to a ControllerRevisionLister for one workspace.
// All objects returned here must be treated as read-only.
type ControllerRevisionClusterLister interface {
	// List lists all ControllerRevisions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1.ControllerRevision, err error)
	// Cluster returns a lister that can list and get ControllerRevisions in one workspace.
	Cluster(clusterName logicalcluster.Name) listersappsv1.ControllerRevisionLister
	ControllerRevisionClusterListerExpansion
}

// controllerRevisionClusterLister implements the ControllerRevisionClusterLister interface.
type controllerRevisionClusterLister struct {
	kcplisters.ResourceClusterIndexer[*appsv1.ControllerRevision]
}

var _ ControllerRevisionClusterLister = new(controllerRevisionClusterLister)

// NewControllerRevisionClusterLister returns a new ControllerRevisionClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewControllerRevisionClusterLister(indexer cache.Indexer) ControllerRevisionClusterLister {
	return &controllerRevisionClusterLister{
		kcplisters.NewCluster[*appsv1.ControllerRevision](indexer, appsv1.Resource("controllerrevision")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ControllerRevisions.
func (l *controllerRevisionClusterLister) Cluster(clusterName logicalcluster.Name) listersappsv1.ControllerRevisionLister {
	return &controllerRevisionLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// controllerRevisionLister can list all ControllerRevisions inside a workspace
// or scope down to a listersappsv1.ControllerRevisionNamespaceLister for one namespace.
type controllerRevisionLister struct {
	kcplisters.ResourceIndexer[*appsv1.ControllerRevision]
}

var _ listersappsv1.ControllerRevisionLister = new(controllerRevisionLister)

// ControllerRevisions returns an object that can list and get ControllerRevisions in one namespace.
func (l *controllerRevisionLister) ControllerRevisions(namespace string) listersappsv1.ControllerRevisionNamespaceLister {
	return &controllerRevisionNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// controllerRevisionNamespaceLister implements the listersappsv1.ControllerRevisionNamespaceLister
// interface.
type controllerRevisionNamespaceLister struct {
	kcplisters.ResourceIndexer[*appsv1.ControllerRevision]
}

var _ listersappsv1.ControllerRevisionNamespaceLister = new(controllerRevisionNamespaceLister)

// NewControllerRevisionLister returns a new ControllerRevisionLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewControllerRevisionLister(indexer cache.Indexer) listersappsv1.ControllerRevisionLister {
	return &controllerRevisionLister{
		kcplisters.New[*appsv1.ControllerRevision](indexer, appsv1.Resource("controllerrevision")),
	}
}

// controllerRevisionScopedLister can list all ControllerRevisions inside a workspace
// or scope down to a listersappsv1.ControllerRevisionNamespaceLister for one namespace.
type controllerRevisionScopedLister struct {
	kcplisters.ResourceIndexer[*appsv1.ControllerRevision]
}

// ControllerRevisions returns an object that can list and get ControllerRevisions in one namespace.
func (l *controllerRevisionScopedLister) ControllerRevisions(namespace string) listersappsv1.ControllerRevisionLister {
	return &controllerRevisionLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
