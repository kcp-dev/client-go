/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersappsv1 "k8s.io/client-go/listers/apps/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ReplicaSetClusterLister helps list ReplicaSets across all workspaces,
// or scope down to a ReplicaSetLister for one workspace.
// All objects returned here must be treated as read-only.
type ReplicaSetClusterLister interface {
	// List lists all ReplicaSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1.ReplicaSet, err error)
	// Cluster returns a lister that can list and get ReplicaSets in one workspace.
	Cluster(clusterName logicalcluster.Name) listersappsv1.ReplicaSetLister
	ReplicaSetClusterListerExpansion
}

// replicaSetClusterLister implements the ReplicaSetClusterLister interface.
type replicaSetClusterLister struct {
	kcplisters.ResourceClusterIndexer[*appsv1.ReplicaSet]
}

var _ ReplicaSetClusterLister = new(replicaSetClusterLister)

// NewReplicaSetClusterLister returns a new ReplicaSetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewReplicaSetClusterLister(indexer cache.Indexer) ReplicaSetClusterLister {
	return &replicaSetClusterLister{
		kcplisters.NewCluster[*appsv1.ReplicaSet](indexer, appsv1.Resource("replicaset")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ReplicaSets.
func (l *replicaSetClusterLister) Cluster(clusterName logicalcluster.Name) listersappsv1.ReplicaSetLister {
	return &replicaSetLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// replicaSetLister can list all ReplicaSets inside a workspace
// or scope down to a listersappsv1.ReplicaSetNamespaceLister for one namespace.
type replicaSetLister struct {
	kcplisters.ResourceIndexer[*appsv1.ReplicaSet]
}

var _ listersappsv1.ReplicaSetLister = new(replicaSetLister)

// ReplicaSets returns an object that can list and get ReplicaSets in one namespace.
func (l *replicaSetLister) ReplicaSets(namespace string) listersappsv1.ReplicaSetNamespaceLister {
	return &replicaSetNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// replicaSetNamespaceLister implements the listersappsv1.ReplicaSetNamespaceLister
// interface.
type replicaSetNamespaceLister struct {
	kcplisters.ResourceIndexer[*appsv1.ReplicaSet]
}

var _ listersappsv1.ReplicaSetNamespaceLister = new(replicaSetNamespaceLister)

// NewReplicaSetLister returns a new ReplicaSetLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewReplicaSetLister(indexer cache.Indexer) listersappsv1.ReplicaSetLister {
	return &replicaSetLister{
		kcplisters.New[*appsv1.ReplicaSet](indexer, appsv1.Resource("replicaset")),
	}
}

// replicaSetScopedLister can list all ReplicaSets inside a workspace
// or scope down to a listersappsv1.ReplicaSetNamespaceLister for one namespace.
type replicaSetScopedLister struct {
	kcplisters.ResourceIndexer[*appsv1.ReplicaSet]
}

// ReplicaSets returns an object that can list and get ReplicaSets in one namespace.
func (l *replicaSetScopedLister) ReplicaSets(namespace string) listersappsv1.ReplicaSetLister {
	return &replicaSetLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
