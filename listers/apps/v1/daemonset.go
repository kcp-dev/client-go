/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersappsv1 "k8s.io/client-go/listers/apps/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// DaemonSetClusterLister helps list DaemonSets across all workspaces,
// or scope down to a DaemonSetLister for one workspace.
// All objects returned here must be treated as read-only.
type DaemonSetClusterLister interface {
	// List lists all DaemonSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*appsv1.DaemonSet, err error)
	// Cluster returns a lister that can list and get DaemonSets in one workspace.
	Cluster(clusterName logicalcluster.Name) listersappsv1.DaemonSetLister
	DaemonSetClusterListerExpansion
}

// daemonSetClusterLister implements the DaemonSetClusterLister interface.
type daemonSetClusterLister struct {
	kcplisters.ResourceClusterIndexer[*appsv1.DaemonSet]
}

var _ DaemonSetClusterLister = new(daemonSetClusterLister)

// NewDaemonSetClusterLister returns a new DaemonSetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewDaemonSetClusterLister(indexer cache.Indexer) DaemonSetClusterLister {
	return &daemonSetClusterLister{
		kcplisters.NewCluster[*appsv1.DaemonSet](indexer, appsv1.Resource("daemonset")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get DaemonSets.
func (l *daemonSetClusterLister) Cluster(clusterName logicalcluster.Name) listersappsv1.DaemonSetLister {
	return &daemonSetLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// daemonSetLister can list all DaemonSets inside a workspace
// or scope down to a listersappsv1.DaemonSetNamespaceLister for one namespace.
type daemonSetLister struct {
	kcplisters.ResourceIndexer[*appsv1.DaemonSet]
}

var _ listersappsv1.DaemonSetLister = new(daemonSetLister)

// DaemonSets returns an object that can list and get DaemonSets in one namespace.
func (l *daemonSetLister) DaemonSets(namespace string) listersappsv1.DaemonSetNamespaceLister {
	return &daemonSetNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// daemonSetNamespaceLister implements the listersappsv1.DaemonSetNamespaceLister
// interface.
type daemonSetNamespaceLister struct {
	kcplisters.ResourceIndexer[*appsv1.DaemonSet]
}

var _ listersappsv1.DaemonSetNamespaceLister = new(daemonSetNamespaceLister)

// NewDaemonSetLister returns a new DaemonSetLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewDaemonSetLister(indexer cache.Indexer) listersappsv1.DaemonSetLister {
	return &daemonSetLister{
		kcplisters.New[*appsv1.DaemonSet](indexer, appsv1.Resource("daemonset")),
	}
}

// daemonSetScopedLister can list all DaemonSets inside a workspace
// or scope down to a listersappsv1.DaemonSetNamespaceLister for one namespace.
type daemonSetScopedLister struct {
	kcplisters.ResourceIndexer[*appsv1.DaemonSet]
}

// DaemonSets returns an object that can list and get DaemonSets in one namespace.
func (l *daemonSetScopedLister) DaemonSets(namespace string) listersappsv1.DaemonSetLister {
	return &daemonSetLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
