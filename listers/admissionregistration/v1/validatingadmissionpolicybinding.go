/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersadmissionregistrationv1 "k8s.io/client-go/listers/admissionregistration/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ValidatingAdmissionPolicyBindingClusterLister helps list ValidatingAdmissionPolicyBindings across all workspaces,
// or scope down to a ValidatingAdmissionPolicyBindingLister for one workspace.
// All objects returned here must be treated as read-only.
type ValidatingAdmissionPolicyBindingClusterLister interface {
	// List lists all ValidatingAdmissionPolicyBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*admissionregistrationv1.ValidatingAdmissionPolicyBinding, err error)
	// Cluster returns a lister that can list and get ValidatingAdmissionPolicyBindings in one workspace.
	Cluster(clusterName logicalcluster.Name) listersadmissionregistrationv1.ValidatingAdmissionPolicyBindingLister
	ValidatingAdmissionPolicyBindingClusterListerExpansion
}

// validatingAdmissionPolicyBindingClusterLister implements the ValidatingAdmissionPolicyBindingClusterLister interface.
type validatingAdmissionPolicyBindingClusterLister struct {
	kcplisters.ResourceClusterIndexer[*admissionregistrationv1.ValidatingAdmissionPolicyBinding]
}

var _ ValidatingAdmissionPolicyBindingClusterLister = new(validatingAdmissionPolicyBindingClusterLister)

// NewValidatingAdmissionPolicyBindingClusterLister returns a new ValidatingAdmissionPolicyBindingClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewValidatingAdmissionPolicyBindingClusterLister(indexer cache.Indexer) ValidatingAdmissionPolicyBindingClusterLister {
	return &validatingAdmissionPolicyBindingClusterLister{
		kcplisters.NewCluster[*admissionregistrationv1.ValidatingAdmissionPolicyBinding](indexer, admissionregistrationv1.Resource("validatingadmissionpolicybinding")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ValidatingAdmissionPolicyBindings.
func (l *validatingAdmissionPolicyBindingClusterLister) Cluster(clusterName logicalcluster.Name) listersadmissionregistrationv1.ValidatingAdmissionPolicyBindingLister {
	return &validatingAdmissionPolicyBindingLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// validatingAdmissionPolicyBindingLister can list all ValidatingAdmissionPolicyBindings inside a workspace
// or scope down to a listersadmissionregistrationv1.ValidatingAdmissionPolicyBindingNamespaceLister for one namespace.
type validatingAdmissionPolicyBindingLister struct {
	kcplisters.ResourceIndexer[*admissionregistrationv1.ValidatingAdmissionPolicyBinding]
}

var _ listersadmissionregistrationv1.ValidatingAdmissionPolicyBindingLister = new(validatingAdmissionPolicyBindingLister)

// NewValidatingAdmissionPolicyBindingLister returns a new ValidatingAdmissionPolicyBindingLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewValidatingAdmissionPolicyBindingLister(indexer cache.Indexer) listersadmissionregistrationv1.ValidatingAdmissionPolicyBindingLister {
	return &validatingAdmissionPolicyBindingLister{
		kcplisters.New[*admissionregistrationv1.ValidatingAdmissionPolicyBinding](indexer, admissionregistrationv1.Resource("validatingadmissionpolicybinding")),
	}
}

// validatingAdmissionPolicyBindingScopedLister can list all ValidatingAdmissionPolicyBindings inside a workspace
// or scope down to a listersadmissionregistrationv1.ValidatingAdmissionPolicyBindingNamespaceLister.
type validatingAdmissionPolicyBindingScopedLister struct {
	kcplisters.ResourceIndexer[*admissionregistrationv1.ValidatingAdmissionPolicyBinding]
}
