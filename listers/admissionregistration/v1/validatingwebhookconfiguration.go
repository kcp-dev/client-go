/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersadmissionregistrationv1 "k8s.io/client-go/listers/admissionregistration/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ValidatingWebhookConfigurationClusterLister helps list ValidatingWebhookConfigurations across all workspaces,
// or scope down to a ValidatingWebhookConfigurationLister for one workspace.
// All objects returned here must be treated as read-only.
type ValidatingWebhookConfigurationClusterLister interface {
	// List lists all ValidatingWebhookConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*admissionregistrationv1.ValidatingWebhookConfiguration, err error)
	// Cluster returns a lister that can list and get ValidatingWebhookConfigurations in one workspace.
	Cluster(clusterName logicalcluster.Name) listersadmissionregistrationv1.ValidatingWebhookConfigurationLister
	ValidatingWebhookConfigurationClusterListerExpansion
}

// validatingWebhookConfigurationClusterLister implements the ValidatingWebhookConfigurationClusterLister interface.
type validatingWebhookConfigurationClusterLister struct {
	kcplisters.ResourceClusterIndexer[*admissionregistrationv1.ValidatingWebhookConfiguration]
}

var _ ValidatingWebhookConfigurationClusterLister = new(validatingWebhookConfigurationClusterLister)

// NewValidatingWebhookConfigurationClusterLister returns a new ValidatingWebhookConfigurationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewValidatingWebhookConfigurationClusterLister(indexer cache.Indexer) ValidatingWebhookConfigurationClusterLister {
	return &validatingWebhookConfigurationClusterLister{
		kcplisters.NewCluster[*admissionregistrationv1.ValidatingWebhookConfiguration](indexer, admissionregistrationv1.Resource("validatingwebhookconfiguration")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ValidatingWebhookConfigurations.
func (l *validatingWebhookConfigurationClusterLister) Cluster(clusterName logicalcluster.Name) listersadmissionregistrationv1.ValidatingWebhookConfigurationLister {
	return &validatingWebhookConfigurationLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// validatingWebhookConfigurationLister can list all ValidatingWebhookConfigurations inside a workspace
// or scope down to a listersadmissionregistrationv1.ValidatingWebhookConfigurationNamespaceLister for one namespace.
type validatingWebhookConfigurationLister struct {
	kcplisters.ResourceIndexer[*admissionregistrationv1.ValidatingWebhookConfiguration]
}

var _ listersadmissionregistrationv1.ValidatingWebhookConfigurationLister = new(validatingWebhookConfigurationLister)

// NewValidatingWebhookConfigurationLister returns a new ValidatingWebhookConfigurationLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewValidatingWebhookConfigurationLister(indexer cache.Indexer) listersadmissionregistrationv1.ValidatingWebhookConfigurationLister {
	return &validatingWebhookConfigurationLister{
		kcplisters.New[*admissionregistrationv1.ValidatingWebhookConfiguration](indexer, admissionregistrationv1.Resource("validatingwebhookconfiguration")),
	}
}

// validatingWebhookConfigurationScopedLister can list all ValidatingWebhookConfigurations inside a workspace
// or scope down to a listersadmissionregistrationv1.ValidatingWebhookConfigurationNamespaceLister.
type validatingWebhookConfigurationScopedLister struct {
	kcplisters.ResourceIndexer[*admissionregistrationv1.ValidatingWebhookConfiguration]
}
