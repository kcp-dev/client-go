/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	admissionregistrationv1beta1 "k8s.io/api/admissionregistration/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersadmissionregistrationv1beta1 "k8s.io/client-go/listers/admissionregistration/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// MutatingWebhookConfigurationClusterLister helps list MutatingWebhookConfigurations across all workspaces,
// or scope down to a MutatingWebhookConfigurationLister for one workspace.
// All objects returned here must be treated as read-only.
type MutatingWebhookConfigurationClusterLister interface {
	// List lists all MutatingWebhookConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*admissionregistrationv1beta1.MutatingWebhookConfiguration, err error)
	// Cluster returns a lister that can list and get MutatingWebhookConfigurations in one workspace.
	Cluster(clusterName logicalcluster.Name) listersadmissionregistrationv1beta1.MutatingWebhookConfigurationLister
	MutatingWebhookConfigurationClusterListerExpansion
}

// mutatingWebhookConfigurationClusterLister implements the MutatingWebhookConfigurationClusterLister interface.
type mutatingWebhookConfigurationClusterLister struct {
	kcplisters.ResourceClusterIndexer[*admissionregistrationv1beta1.MutatingWebhookConfiguration]
}

var _ MutatingWebhookConfigurationClusterLister = new(mutatingWebhookConfigurationClusterLister)

// NewMutatingWebhookConfigurationClusterLister returns a new MutatingWebhookConfigurationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewMutatingWebhookConfigurationClusterLister(indexer cache.Indexer) MutatingWebhookConfigurationClusterLister {
	return &mutatingWebhookConfigurationClusterLister{
		kcplisters.NewCluster[*admissionregistrationv1beta1.MutatingWebhookConfiguration](indexer, admissionregistrationv1beta1.Resource("mutatingwebhookconfiguration")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get MutatingWebhookConfigurations.
func (l *mutatingWebhookConfigurationClusterLister) Cluster(clusterName logicalcluster.Name) listersadmissionregistrationv1beta1.MutatingWebhookConfigurationLister {
	return &mutatingWebhookConfigurationLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// mutatingWebhookConfigurationLister can list all MutatingWebhookConfigurations inside a workspace
// or scope down to a listersadmissionregistrationv1beta1.MutatingWebhookConfigurationNamespaceLister for one namespace.
type mutatingWebhookConfigurationLister struct {
	kcplisters.ResourceIndexer[*admissionregistrationv1beta1.MutatingWebhookConfiguration]
}

var _ listersadmissionregistrationv1beta1.MutatingWebhookConfigurationLister = new(mutatingWebhookConfigurationLister)

// NewMutatingWebhookConfigurationLister returns a new MutatingWebhookConfigurationLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewMutatingWebhookConfigurationLister(indexer cache.Indexer) listersadmissionregistrationv1beta1.MutatingWebhookConfigurationLister {
	return &mutatingWebhookConfigurationLister{
		kcplisters.New[*admissionregistrationv1beta1.MutatingWebhookConfiguration](indexer, admissionregistrationv1beta1.Resource("mutatingwebhookconfiguration")),
	}
}

// mutatingWebhookConfigurationScopedLister can list all MutatingWebhookConfigurations inside a workspace
// or scope down to a listersadmissionregistrationv1beta1.MutatingWebhookConfigurationNamespaceLister.
type mutatingWebhookConfigurationScopedLister struct {
	kcplisters.ResourceIndexer[*admissionregistrationv1beta1.MutatingWebhookConfiguration]
}
