/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	networkingv1beta1 "k8s.io/api/networking/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersnetworkingv1beta1 "k8s.io/client-go/listers/networking/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// IPAddressClusterLister helps list IPAddresses across all workspaces,
// or scope down to a IPAddressLister for one workspace.
// All objects returned here must be treated as read-only.
type IPAddressClusterLister interface {
	// List lists all IPAddresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*networkingv1beta1.IPAddress, err error)
	// Cluster returns a lister that can list and get IPAddresses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersnetworkingv1beta1.IPAddressLister
	IPAddressClusterListerExpansion
}

// iPAddressClusterLister implements the IPAddressClusterLister interface.
type iPAddressClusterLister struct {
	kcplisters.ResourceClusterIndexer[*networkingv1beta1.IPAddress]
}

var _ IPAddressClusterLister = new(iPAddressClusterLister)

// NewIPAddressClusterLister returns a new IPAddressClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewIPAddressClusterLister(indexer cache.Indexer) IPAddressClusterLister {
	return &iPAddressClusterLister{
		kcplisters.NewCluster[*networkingv1beta1.IPAddress](indexer, networkingv1beta1.Resource("ipaddress")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get IPAddresses.
func (l *iPAddressClusterLister) Cluster(clusterName logicalcluster.Name) listersnetworkingv1beta1.IPAddressLister {
	return &iPAddressLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// iPAddressLister can list all IPAddresses inside a workspace
// or scope down to a listersnetworkingv1beta1.IPAddressNamespaceLister for one namespace.
type iPAddressLister struct {
	kcplisters.ResourceIndexer[*networkingv1beta1.IPAddress]
}

var _ listersnetworkingv1beta1.IPAddressLister = new(iPAddressLister)

// NewIPAddressLister returns a new IPAddressLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewIPAddressLister(indexer cache.Indexer) listersnetworkingv1beta1.IPAddressLister {
	return &iPAddressLister{
		kcplisters.New[*networkingv1beta1.IPAddress](indexer, networkingv1beta1.Resource("ipaddress")),
	}
}

// iPAddressScopedLister can list all IPAddresses inside a workspace
// or scope down to a listersnetworkingv1beta1.IPAddressNamespaceLister.
type iPAddressScopedLister struct {
	kcplisters.ResourceIndexer[*networkingv1beta1.IPAddress]
}
