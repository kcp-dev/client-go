/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	networkingv1beta1 "k8s.io/api/networking/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersnetworkingv1beta1 "k8s.io/client-go/listers/networking/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ServiceCIDRClusterLister helps list ServiceCIDRs across all workspaces,
// or scope down to a ServiceCIDRLister for one workspace.
// All objects returned here must be treated as read-only.
type ServiceCIDRClusterLister interface {
	// List lists all ServiceCIDRs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*networkingv1beta1.ServiceCIDR, err error)
	// Cluster returns a lister that can list and get ServiceCIDRs in one workspace.
	Cluster(clusterName logicalcluster.Name) listersnetworkingv1beta1.ServiceCIDRLister
	ServiceCIDRClusterListerExpansion
}

// serviceCIDRClusterLister implements the ServiceCIDRClusterLister interface.
type serviceCIDRClusterLister struct {
	kcplisters.ResourceClusterIndexer[*networkingv1beta1.ServiceCIDR]
}

var _ ServiceCIDRClusterLister = new(serviceCIDRClusterLister)

// NewServiceCIDRClusterLister returns a new ServiceCIDRClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewServiceCIDRClusterLister(indexer cache.Indexer) ServiceCIDRClusterLister {
	return &serviceCIDRClusterLister{
		kcplisters.NewCluster[*networkingv1beta1.ServiceCIDR](indexer, networkingv1beta1.Resource("servicecidr")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ServiceCIDRs.
func (l *serviceCIDRClusterLister) Cluster(clusterName logicalcluster.Name) listersnetworkingv1beta1.ServiceCIDRLister {
	return &serviceCIDRLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// serviceCIDRLister can list all ServiceCIDRs inside a workspace
// or scope down to a listersnetworkingv1beta1.ServiceCIDRNamespaceLister for one namespace.
type serviceCIDRLister struct {
	kcplisters.ResourceIndexer[*networkingv1beta1.ServiceCIDR]
}

var _ listersnetworkingv1beta1.ServiceCIDRLister = new(serviceCIDRLister)

// NewServiceCIDRLister returns a new ServiceCIDRLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewServiceCIDRLister(indexer cache.Indexer) listersnetworkingv1beta1.ServiceCIDRLister {
	return &serviceCIDRLister{
		kcplisters.New[*networkingv1beta1.ServiceCIDR](indexer, networkingv1beta1.Resource("servicecidr")),
	}
}

// serviceCIDRScopedLister can list all ServiceCIDRs inside a workspace
// or scope down to a listersnetworkingv1beta1.ServiceCIDRNamespaceLister.
type serviceCIDRScopedLister struct {
	kcplisters.ResourceIndexer[*networkingv1beta1.ServiceCIDR]
}
