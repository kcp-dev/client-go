/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersextensionsv1beta1 "k8s.io/client-go/listers/extensions/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// IngressClusterLister helps list Ingresses across all workspaces,
// or scope down to a IngressLister for one workspace.
// All objects returned here must be treated as read-only.
type IngressClusterLister interface {
	// List lists all Ingresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.Ingress, err error)
	// Cluster returns a lister that can list and get Ingresses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersextensionsv1beta1.IngressLister
	IngressClusterListerExpansion
}

// ingressClusterLister implements the IngressClusterLister interface.
type ingressClusterLister struct {
	kcplisters.ResourceClusterIndexer[*extensionsv1beta1.Ingress]
}

var _ IngressClusterLister = new(ingressClusterLister)

// NewIngressClusterLister returns a new IngressClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewIngressClusterLister(indexer cache.Indexer) IngressClusterLister {
	return &ingressClusterLister{
		kcplisters.NewCluster[*extensionsv1beta1.Ingress](indexer, extensionsv1beta1.Resource("ingress")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Ingresses.
func (l *ingressClusterLister) Cluster(clusterName logicalcluster.Name) listersextensionsv1beta1.IngressLister {
	return &ingressLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// ingressLister can list all Ingresses inside a workspace
// or scope down to a listersextensionsv1beta1.IngressNamespaceLister for one namespace.
type ingressLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.Ingress]
}

var _ listersextensionsv1beta1.IngressLister = new(ingressLister)

// Ingresses returns an object that can list and get Ingresses in one namespace.
func (l *ingressLister) Ingresses(namespace string) listersextensionsv1beta1.IngressNamespaceLister {
	return &ingressNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// ingressNamespaceLister implements the listersextensionsv1beta1.IngressNamespaceLister
// interface.
type ingressNamespaceLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.Ingress]
}

var _ listersextensionsv1beta1.IngressNamespaceLister = new(ingressNamespaceLister)

// NewIngressLister returns a new IngressLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewIngressLister(indexer cache.Indexer) listersextensionsv1beta1.IngressLister {
	return &ingressLister{
		kcplisters.New[*extensionsv1beta1.Ingress](indexer, extensionsv1beta1.Resource("ingress")),
	}
}

// ingressScopedLister can list all Ingresses inside a workspace
// or scope down to a listersextensionsv1beta1.IngressNamespaceLister for one namespace.
type ingressScopedLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.Ingress]
}

// Ingresses returns an object that can list and get Ingresses in one namespace.
func (l *ingressScopedLister) Ingresses(namespace string) listersextensionsv1beta1.IngressLister {
	return &ingressLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
