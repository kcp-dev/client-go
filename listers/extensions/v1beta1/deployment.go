/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersextensionsv1beta1 "k8s.io/client-go/listers/extensions/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// DeploymentClusterLister helps list Deployments across all workspaces,
// or scope down to a DeploymentLister for one workspace.
// All objects returned here must be treated as read-only.
type DeploymentClusterLister interface {
	// List lists all Deployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.Deployment, err error)
	// Cluster returns a lister that can list and get Deployments in one workspace.
	Cluster(clusterName logicalcluster.Name) listersextensionsv1beta1.DeploymentLister
	DeploymentClusterListerExpansion
}

// deploymentClusterLister implements the DeploymentClusterLister interface.
type deploymentClusterLister struct {
	kcplisters.ResourceClusterIndexer[*extensionsv1beta1.Deployment]
}

var _ DeploymentClusterLister = new(deploymentClusterLister)

// NewDeploymentClusterLister returns a new DeploymentClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewDeploymentClusterLister(indexer cache.Indexer) DeploymentClusterLister {
	return &deploymentClusterLister{
		kcplisters.NewCluster[*extensionsv1beta1.Deployment](indexer, extensionsv1beta1.Resource("deployment")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Deployments.
func (l *deploymentClusterLister) Cluster(clusterName logicalcluster.Name) listersextensionsv1beta1.DeploymentLister {
	return &deploymentLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// deploymentLister can list all Deployments inside a workspace
// or scope down to a listersextensionsv1beta1.DeploymentNamespaceLister for one namespace.
type deploymentLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.Deployment]
}

var _ listersextensionsv1beta1.DeploymentLister = new(deploymentLister)

// Deployments returns an object that can list and get Deployments in one namespace.
func (l *deploymentLister) Deployments(namespace string) listersextensionsv1beta1.DeploymentNamespaceLister {
	return &deploymentNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// deploymentNamespaceLister implements the listersextensionsv1beta1.DeploymentNamespaceLister
// interface.
type deploymentNamespaceLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.Deployment]
}

var _ listersextensionsv1beta1.DeploymentNamespaceLister = new(deploymentNamespaceLister)

// NewDeploymentLister returns a new DeploymentLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewDeploymentLister(indexer cache.Indexer) listersextensionsv1beta1.DeploymentLister {
	return &deploymentLister{
		kcplisters.New[*extensionsv1beta1.Deployment](indexer, extensionsv1beta1.Resource("deployment")),
	}
}

// deploymentScopedLister can list all Deployments inside a workspace
// or scope down to a listersextensionsv1beta1.DeploymentNamespaceLister for one namespace.
type deploymentScopedLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.Deployment]
}

// Deployments returns an object that can list and get Deployments in one namespace.
func (l *deploymentScopedLister) Deployments(namespace string) listersextensionsv1beta1.DeploymentLister {
	return &deploymentLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
