/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersextensionsv1beta1 "k8s.io/client-go/listers/extensions/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// NetworkPolicyClusterLister helps list NetworkPolicies across all workspaces,
// or scope down to a NetworkPolicyLister for one workspace.
// All objects returned here must be treated as read-only.
type NetworkPolicyClusterLister interface {
	// List lists all NetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*extensionsv1beta1.NetworkPolicy, err error)
	// Cluster returns a lister that can list and get NetworkPolicies in one workspace.
	Cluster(clusterName logicalcluster.Name) listersextensionsv1beta1.NetworkPolicyLister
	NetworkPolicyClusterListerExpansion
}

// networkPolicyClusterLister implements the NetworkPolicyClusterLister interface.
type networkPolicyClusterLister struct {
	kcplisters.ResourceClusterIndexer[*extensionsv1beta1.NetworkPolicy]
}

var _ NetworkPolicyClusterLister = new(networkPolicyClusterLister)

// NewNetworkPolicyClusterLister returns a new NetworkPolicyClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewNetworkPolicyClusterLister(indexer cache.Indexer) NetworkPolicyClusterLister {
	return &networkPolicyClusterLister{
		kcplisters.NewCluster[*extensionsv1beta1.NetworkPolicy](indexer, extensionsv1beta1.Resource("networkpolicy")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get NetworkPolicies.
func (l *networkPolicyClusterLister) Cluster(clusterName logicalcluster.Name) listersextensionsv1beta1.NetworkPolicyLister {
	return &networkPolicyLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// networkPolicyLister can list all NetworkPolicies inside a workspace
// or scope down to a listersextensionsv1beta1.NetworkPolicyNamespaceLister for one namespace.
type networkPolicyLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.NetworkPolicy]
}

var _ listersextensionsv1beta1.NetworkPolicyLister = new(networkPolicyLister)

// NetworkPolicies returns an object that can list and get NetworkPolicies in one namespace.
func (l *networkPolicyLister) NetworkPolicies(namespace string) listersextensionsv1beta1.NetworkPolicyNamespaceLister {
	return &networkPolicyNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// networkPolicyNamespaceLister implements the listersextensionsv1beta1.NetworkPolicyNamespaceLister
// interface.
type networkPolicyNamespaceLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.NetworkPolicy]
}

var _ listersextensionsv1beta1.NetworkPolicyNamespaceLister = new(networkPolicyNamespaceLister)

// NewNetworkPolicyLister returns a new NetworkPolicyLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewNetworkPolicyLister(indexer cache.Indexer) listersextensionsv1beta1.NetworkPolicyLister {
	return &networkPolicyLister{
		kcplisters.New[*extensionsv1beta1.NetworkPolicy](indexer, extensionsv1beta1.Resource("networkpolicy")),
	}
}

// networkPolicyScopedLister can list all NetworkPolicies inside a workspace
// or scope down to a listersextensionsv1beta1.NetworkPolicyNamespaceLister for one namespace.
type networkPolicyScopedLister struct {
	kcplisters.ResourceIndexer[*extensionsv1beta1.NetworkPolicy]
}

// NetworkPolicies returns an object that can list and get NetworkPolicies in one namespace.
func (l *networkPolicyScopedLister) NetworkPolicies(namespace string) listersextensionsv1beta1.NetworkPolicyLister {
	return &networkPolicyLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
