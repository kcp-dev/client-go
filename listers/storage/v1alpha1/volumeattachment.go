/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	storagev1alpha1 "k8s.io/api/storage/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	listersstoragev1alpha1 "k8s.io/client-go/listers/storage/v1alpha1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// VolumeAttachmentClusterLister helps list VolumeAttachments across all workspaces,
// or scope down to a VolumeAttachmentLister for one workspace.
// All objects returned here must be treated as read-only.
type VolumeAttachmentClusterLister interface {
	// List lists all VolumeAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1alpha1.VolumeAttachment, err error)
	// Cluster returns a lister that can list and get VolumeAttachments in one workspace.
	Cluster(clusterName logicalcluster.Name) listersstoragev1alpha1.VolumeAttachmentLister
	VolumeAttachmentClusterListerExpansion
}

// volumeAttachmentClusterLister implements the VolumeAttachmentClusterLister interface.
type volumeAttachmentClusterLister struct {
	kcplisters.ResourceClusterIndexer[*storagev1alpha1.VolumeAttachment]
}

var _ VolumeAttachmentClusterLister = new(volumeAttachmentClusterLister)

// NewVolumeAttachmentClusterLister returns a new VolumeAttachmentClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewVolumeAttachmentClusterLister(indexer cache.Indexer) VolumeAttachmentClusterLister {
	return &volumeAttachmentClusterLister{
		kcplisters.NewCluster[*storagev1alpha1.VolumeAttachment](indexer, storagev1alpha1.Resource("volumeattachment")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get VolumeAttachments.
func (l *volumeAttachmentClusterLister) Cluster(clusterName logicalcluster.Name) listersstoragev1alpha1.VolumeAttachmentLister {
	return &volumeAttachmentLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// volumeAttachmentLister can list all VolumeAttachments inside a workspace
// or scope down to a listersstoragev1alpha1.VolumeAttachmentNamespaceLister for one namespace.
type volumeAttachmentLister struct {
	kcplisters.ResourceIndexer[*storagev1alpha1.VolumeAttachment]
}

var _ listersstoragev1alpha1.VolumeAttachmentLister = new(volumeAttachmentLister)

// NewVolumeAttachmentLister returns a new VolumeAttachmentLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewVolumeAttachmentLister(indexer cache.Indexer) listersstoragev1alpha1.VolumeAttachmentLister {
	return &volumeAttachmentLister{
		kcplisters.New[*storagev1alpha1.VolumeAttachment](indexer, storagev1alpha1.Resource("volumeattachment")),
	}
}

// volumeAttachmentScopedLister can list all VolumeAttachments inside a workspace
// or scope down to a listersstoragev1alpha1.VolumeAttachmentNamespaceLister.
type volumeAttachmentScopedLister struct {
	kcplisters.ResourceIndexer[*storagev1alpha1.VolumeAttachment]
}
