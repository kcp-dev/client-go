/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	storagev1alpha1 "k8s.io/api/storage/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	listersstoragev1alpha1 "k8s.io/client-go/listers/storage/v1alpha1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// VolumeAttributesClassClusterLister helps list VolumeAttributesClasses across all workspaces,
// or scope down to a VolumeAttributesClassLister for one workspace.
// All objects returned here must be treated as read-only.
type VolumeAttributesClassClusterLister interface {
	// List lists all VolumeAttributesClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1alpha1.VolumeAttributesClass, err error)
	// Cluster returns a lister that can list and get VolumeAttributesClasses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersstoragev1alpha1.VolumeAttributesClassLister
	VolumeAttributesClassClusterListerExpansion
}

// volumeAttributesClassClusterLister implements the VolumeAttributesClassClusterLister interface.
type volumeAttributesClassClusterLister struct {
	kcplisters.ResourceClusterIndexer[*storagev1alpha1.VolumeAttributesClass]
}

var _ VolumeAttributesClassClusterLister = new(volumeAttributesClassClusterLister)

// NewVolumeAttributesClassClusterLister returns a new VolumeAttributesClassClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewVolumeAttributesClassClusterLister(indexer cache.Indexer) VolumeAttributesClassClusterLister {
	return &volumeAttributesClassClusterLister{
		kcplisters.NewCluster[*storagev1alpha1.VolumeAttributesClass](indexer, storagev1alpha1.Resource("volumeattributesclass")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get VolumeAttributesClasses.
func (l *volumeAttributesClassClusterLister) Cluster(clusterName logicalcluster.Name) listersstoragev1alpha1.VolumeAttributesClassLister {
	return &volumeAttributesClassLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// volumeAttributesClassLister can list all VolumeAttributesClasses inside a workspace
// or scope down to a listersstoragev1alpha1.VolumeAttributesClassNamespaceLister for one namespace.
type volumeAttributesClassLister struct {
	kcplisters.ResourceIndexer[*storagev1alpha1.VolumeAttributesClass]
}

var _ listersstoragev1alpha1.VolumeAttributesClassLister = new(volumeAttributesClassLister)

// NewVolumeAttributesClassLister returns a new VolumeAttributesClassLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewVolumeAttributesClassLister(indexer cache.Indexer) listersstoragev1alpha1.VolumeAttributesClassLister {
	return &volumeAttributesClassLister{
		kcplisters.New[*storagev1alpha1.VolumeAttributesClass](indexer, storagev1alpha1.Resource("volumeattributesclass")),
	}
}

// volumeAttributesClassScopedLister can list all VolumeAttributesClasses inside a workspace
// or scope down to a listersstoragev1alpha1.VolumeAttributesClassNamespaceLister.
type volumeAttributesClassScopedLister struct {
	kcplisters.ResourceIndexer[*storagev1alpha1.VolumeAttributesClass]
}
