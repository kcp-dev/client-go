/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	storagev1beta1 "k8s.io/api/storage/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersstoragev1beta1 "k8s.io/client-go/listers/storage/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// CSIStorageCapacityClusterLister helps list CSIStorageCapacities across all workspaces,
// or scope down to a CSIStorageCapacityLister for one workspace.
// All objects returned here must be treated as read-only.
type CSIStorageCapacityClusterLister interface {
	// List lists all CSIStorageCapacities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1beta1.CSIStorageCapacity, err error)
	// Cluster returns a lister that can list and get CSIStorageCapacities in one workspace.
	Cluster(clusterName logicalcluster.Name) listersstoragev1beta1.CSIStorageCapacityLister
	CSIStorageCapacityClusterListerExpansion
}

// cSIStorageCapacityClusterLister implements the CSIStorageCapacityClusterLister interface.
type cSIStorageCapacityClusterLister struct {
	kcplisters.ResourceClusterIndexer[*storagev1beta1.CSIStorageCapacity]
}

var _ CSIStorageCapacityClusterLister = new(cSIStorageCapacityClusterLister)

// NewCSIStorageCapacityClusterLister returns a new CSIStorageCapacityClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCSIStorageCapacityClusterLister(indexer cache.Indexer) CSIStorageCapacityClusterLister {
	return &cSIStorageCapacityClusterLister{
		kcplisters.NewCluster[*storagev1beta1.CSIStorageCapacity](indexer, storagev1beta1.Resource("csistoragecapacity")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get CSIStorageCapacities.
func (l *cSIStorageCapacityClusterLister) Cluster(clusterName logicalcluster.Name) listersstoragev1beta1.CSIStorageCapacityLister {
	return &cSIStorageCapacityLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// cSIStorageCapacityLister can list all CSIStorageCapacities inside a workspace
// or scope down to a listersstoragev1beta1.CSIStorageCapacityNamespaceLister for one namespace.
type cSIStorageCapacityLister struct {
	kcplisters.ResourceIndexer[*storagev1beta1.CSIStorageCapacity]
}

var _ listersstoragev1beta1.CSIStorageCapacityLister = new(cSIStorageCapacityLister)

// CSIStorageCapacities returns an object that can list and get CSIStorageCapacities in one namespace.
func (l *cSIStorageCapacityLister) CSIStorageCapacities(namespace string) listersstoragev1beta1.CSIStorageCapacityNamespaceLister {
	return &cSIStorageCapacityNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// cSIStorageCapacityNamespaceLister implements the listersstoragev1beta1.CSIStorageCapacityNamespaceLister
// interface.
type cSIStorageCapacityNamespaceLister struct {
	kcplisters.ResourceIndexer[*storagev1beta1.CSIStorageCapacity]
}

var _ listersstoragev1beta1.CSIStorageCapacityNamespaceLister = new(cSIStorageCapacityNamespaceLister)

// NewCSIStorageCapacityLister returns a new CSIStorageCapacityLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCSIStorageCapacityLister(indexer cache.Indexer) listersstoragev1beta1.CSIStorageCapacityLister {
	return &cSIStorageCapacityLister{
		kcplisters.New[*storagev1beta1.CSIStorageCapacity](indexer, storagev1beta1.Resource("csistoragecapacity")),
	}
}

// cSIStorageCapacityScopedLister can list all CSIStorageCapacities inside a workspace
// or scope down to a listersstoragev1beta1.CSIStorageCapacityNamespaceLister for one namespace.
type cSIStorageCapacityScopedLister struct {
	kcplisters.ResourceIndexer[*storagev1beta1.CSIStorageCapacity]
}

// CSIStorageCapacities returns an object that can list and get CSIStorageCapacities in one namespace.
func (l *cSIStorageCapacityScopedLister) CSIStorageCapacities(namespace string) listersstoragev1beta1.CSIStorageCapacityLister {
	return &cSIStorageCapacityLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
