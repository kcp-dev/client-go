/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	storagev1beta1 "k8s.io/api/storage/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersstoragev1beta1 "k8s.io/client-go/listers/storage/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// CSINodeClusterLister helps list CSINodes across all workspaces,
// or scope down to a CSINodeLister for one workspace.
// All objects returned here must be treated as read-only.
type CSINodeClusterLister interface {
	// List lists all CSINodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1beta1.CSINode, err error)
	// Cluster returns a lister that can list and get CSINodes in one workspace.
	Cluster(clusterName logicalcluster.Name) listersstoragev1beta1.CSINodeLister
	CSINodeClusterListerExpansion
}

// cSINodeClusterLister implements the CSINodeClusterLister interface.
type cSINodeClusterLister struct {
	kcplisters.ResourceClusterIndexer[*storagev1beta1.CSINode]
}

var _ CSINodeClusterLister = new(cSINodeClusterLister)

// NewCSINodeClusterLister returns a new CSINodeClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewCSINodeClusterLister(indexer cache.Indexer) CSINodeClusterLister {
	return &cSINodeClusterLister{
		kcplisters.NewCluster[*storagev1beta1.CSINode](indexer, storagev1beta1.Resource("csinode")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get CSINodes.
func (l *cSINodeClusterLister) Cluster(clusterName logicalcluster.Name) listersstoragev1beta1.CSINodeLister {
	return &cSINodeLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// cSINodeLister can list all CSINodes inside a workspace
// or scope down to a listersstoragev1beta1.CSINodeNamespaceLister for one namespace.
type cSINodeLister struct {
	kcplisters.ResourceIndexer[*storagev1beta1.CSINode]
}

var _ listersstoragev1beta1.CSINodeLister = new(cSINodeLister)

// NewCSINodeLister returns a new CSINodeLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewCSINodeLister(indexer cache.Indexer) listersstoragev1beta1.CSINodeLister {
	return &cSINodeLister{
		kcplisters.New[*storagev1beta1.CSINode](indexer, storagev1beta1.Resource("csinode")),
	}
}

// cSINodeScopedLister can list all CSINodes inside a workspace
// or scope down to a listersstoragev1beta1.CSINodeNamespaceLister.
type cSINodeScopedLister struct {
	kcplisters.ResourceIndexer[*storagev1beta1.CSINode]
}
