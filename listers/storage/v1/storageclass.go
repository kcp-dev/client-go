/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	storagev1 "k8s.io/api/storage/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersstoragev1 "k8s.io/client-go/listers/storage/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// StorageClassClusterLister helps list StorageClasses across all workspaces,
// or scope down to a StorageClassLister for one workspace.
// All objects returned here must be treated as read-only.
type StorageClassClusterLister interface {
	// List lists all StorageClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storagev1.StorageClass, err error)
	// Cluster returns a lister that can list and get StorageClasses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersstoragev1.StorageClassLister
	StorageClassClusterListerExpansion
}

// storageClassClusterLister implements the StorageClassClusterLister interface.
type storageClassClusterLister struct {
	kcplisters.ResourceClusterIndexer[*storagev1.StorageClass]
}

var _ StorageClassClusterLister = new(storageClassClusterLister)

// NewStorageClassClusterLister returns a new StorageClassClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewStorageClassClusterLister(indexer cache.Indexer) StorageClassClusterLister {
	return &storageClassClusterLister{
		kcplisters.NewCluster[*storagev1.StorageClass](indexer, storagev1.Resource("storageclass")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get StorageClasses.
func (l *storageClassClusterLister) Cluster(clusterName logicalcluster.Name) listersstoragev1.StorageClassLister {
	return &storageClassLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// storageClassLister can list all StorageClasses inside a workspace
// or scope down to a listersstoragev1.StorageClassNamespaceLister for one namespace.
type storageClassLister struct {
	kcplisters.ResourceIndexer[*storagev1.StorageClass]
}

var _ listersstoragev1.StorageClassLister = new(storageClassLister)

// NewStorageClassLister returns a new StorageClassLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewStorageClassLister(indexer cache.Indexer) listersstoragev1.StorageClassLister {
	return &storageClassLister{
		kcplisters.New[*storagev1.StorageClass](indexer, storagev1.Resource("storageclass")),
	}
}

// storageClassScopedLister can list all StorageClasses inside a workspace
// or scope down to a listersstoragev1.StorageClassNamespaceLister.
type storageClassScopedLister struct {
	kcplisters.ResourceIndexer[*storagev1.StorageClass]
}
