/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta2

import (
	"github.com/kcp-dev/logicalcluster/v3"

	flowcontrolv1beta2 "k8s.io/api/flowcontrol/v1beta2"
	"k8s.io/apimachinery/pkg/labels"
	listersflowcontrolv1beta2 "k8s.io/client-go/listers/flowcontrol/v1beta2"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// PriorityLevelConfigurationClusterLister helps list PriorityLevelConfigurations across all workspaces,
// or scope down to a PriorityLevelConfigurationLister for one workspace.
// All objects returned here must be treated as read-only.
type PriorityLevelConfigurationClusterLister interface {
	// List lists all PriorityLevelConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*flowcontrolv1beta2.PriorityLevelConfiguration, err error)
	// Cluster returns a lister that can list and get PriorityLevelConfigurations in one workspace.
	Cluster(clusterName logicalcluster.Name) listersflowcontrolv1beta2.PriorityLevelConfigurationLister
	PriorityLevelConfigurationClusterListerExpansion
}

// priorityLevelConfigurationClusterLister implements the PriorityLevelConfigurationClusterLister interface.
type priorityLevelConfigurationClusterLister struct {
	kcplisters.ResourceClusterIndexer[*flowcontrolv1beta2.PriorityLevelConfiguration]
}

var _ PriorityLevelConfigurationClusterLister = new(priorityLevelConfigurationClusterLister)

// NewPriorityLevelConfigurationClusterLister returns a new PriorityLevelConfigurationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPriorityLevelConfigurationClusterLister(indexer cache.Indexer) PriorityLevelConfigurationClusterLister {
	return &priorityLevelConfigurationClusterLister{
		kcplisters.NewCluster[*flowcontrolv1beta2.PriorityLevelConfiguration](indexer, flowcontrolv1beta2.Resource("prioritylevelconfiguration")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get PriorityLevelConfigurations.
func (l *priorityLevelConfigurationClusterLister) Cluster(clusterName logicalcluster.Name) listersflowcontrolv1beta2.PriorityLevelConfigurationLister {
	return &priorityLevelConfigurationLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// priorityLevelConfigurationLister can list all PriorityLevelConfigurations inside a workspace
// or scope down to a listersflowcontrolv1beta2.PriorityLevelConfigurationNamespaceLister for one namespace.
type priorityLevelConfigurationLister struct {
	kcplisters.ResourceIndexer[*flowcontrolv1beta2.PriorityLevelConfiguration]
}

var _ listersflowcontrolv1beta2.PriorityLevelConfigurationLister = new(priorityLevelConfigurationLister)

// NewPriorityLevelConfigurationLister returns a new PriorityLevelConfigurationLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPriorityLevelConfigurationLister(indexer cache.Indexer) listersflowcontrolv1beta2.PriorityLevelConfigurationLister {
	return &priorityLevelConfigurationLister{
		kcplisters.New[*flowcontrolv1beta2.PriorityLevelConfiguration](indexer, flowcontrolv1beta2.Resource("prioritylevelconfiguration")),
	}
}

// priorityLevelConfigurationScopedLister can list all PriorityLevelConfigurations inside a workspace
// or scope down to a listersflowcontrolv1beta2.PriorityLevelConfigurationNamespaceLister.
type priorityLevelConfigurationScopedLister struct {
	kcplisters.ResourceIndexer[*flowcontrolv1beta2.PriorityLevelConfiguration]
}
