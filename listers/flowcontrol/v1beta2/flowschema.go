/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta2

import (
	flowcontrolv1beta2 "k8s.io/api/flowcontrol/v1beta2"
	"k8s.io/apimachinery/pkg/labels"
	listersflowcontrolv1beta2 "k8s.io/client-go/listers/flowcontrol/v1beta2"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// FlowSchemaClusterLister helps list FlowSchemas across all workspaces,
// or scope down to a FlowSchemaLister for one workspace.
// All objects returned here must be treated as read-only.
type FlowSchemaClusterLister interface {
	// List lists all FlowSchemas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*flowcontrolv1beta2.FlowSchema, err error)
	// Cluster returns a lister that can list and get FlowSchemas in one workspace.
	Cluster(clusterName logicalcluster.Name) listersflowcontrolv1beta2.FlowSchemaLister
	FlowSchemaClusterListerExpansion
}

// flowSchemaClusterLister implements the FlowSchemaClusterLister interface.
type flowSchemaClusterLister struct {
	kcplisters.ResourceClusterIndexer[*flowcontrolv1beta2.FlowSchema]
}

var _ FlowSchemaClusterLister = new(flowSchemaClusterLister)

// NewFlowSchemaClusterLister returns a new FlowSchemaClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewFlowSchemaClusterLister(indexer cache.Indexer) FlowSchemaClusterLister {
	return &flowSchemaClusterLister{
		kcplisters.NewCluster[*flowcontrolv1beta2.FlowSchema](indexer, flowcontrolv1beta2.Resource("flowschema")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get FlowSchemas.
func (l *flowSchemaClusterLister) Cluster(clusterName logicalcluster.Name) listersflowcontrolv1beta2.FlowSchemaLister {
	return &flowSchemaLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// flowSchemaLister can list all FlowSchemas inside a workspace
// or scope down to a listersflowcontrolv1beta2.FlowSchemaNamespaceLister for one namespace.
type flowSchemaLister struct {
	kcplisters.ResourceIndexer[*flowcontrolv1beta2.FlowSchema]
}

var _ listersflowcontrolv1beta2.FlowSchemaLister = new(flowSchemaLister)

// NewFlowSchemaLister returns a new FlowSchemaLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewFlowSchemaLister(indexer cache.Indexer) listersflowcontrolv1beta2.FlowSchemaLister {
	return &flowSchemaLister{
		kcplisters.New[*flowcontrolv1beta2.FlowSchema](indexer, flowcontrolv1beta2.Resource("flowschema")),
	}
}

// flowSchemaScopedLister can list all FlowSchemas inside a workspace
// or scope down to a listersflowcontrolv1beta2.FlowSchemaNamespaceLister.
type flowSchemaScopedLister struct {
	kcplisters.ResourceIndexer[*flowcontrolv1beta2.FlowSchema]
}
