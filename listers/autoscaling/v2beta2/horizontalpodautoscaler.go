/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v2beta2

import (
	"github.com/kcp-dev/logicalcluster/v3"

	autoscalingv2beta2 "k8s.io/api/autoscaling/v2beta2"
	"k8s.io/apimachinery/pkg/labels"
	listersautoscalingv2beta2 "k8s.io/client-go/listers/autoscaling/v2beta2"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// HorizontalPodAutoscalerClusterLister helps list HorizontalPodAutoscalers across all workspaces,
// or scope down to a HorizontalPodAutoscalerLister for one workspace.
// All objects returned here must be treated as read-only.
type HorizontalPodAutoscalerClusterLister interface {
	// List lists all HorizontalPodAutoscalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*autoscalingv2beta2.HorizontalPodAutoscaler, err error)
	// Cluster returns a lister that can list and get HorizontalPodAutoscalers in one workspace.
	Cluster(clusterName logicalcluster.Name) listersautoscalingv2beta2.HorizontalPodAutoscalerLister
	HorizontalPodAutoscalerClusterListerExpansion
}

// horizontalPodAutoscalerClusterLister implements the HorizontalPodAutoscalerClusterLister interface.
type horizontalPodAutoscalerClusterLister struct {
	kcplisters.ResourceClusterIndexer[*autoscalingv2beta2.HorizontalPodAutoscaler]
}

var _ HorizontalPodAutoscalerClusterLister = new(horizontalPodAutoscalerClusterLister)

// NewHorizontalPodAutoscalerClusterLister returns a new HorizontalPodAutoscalerClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewHorizontalPodAutoscalerClusterLister(indexer cache.Indexer) HorizontalPodAutoscalerClusterLister {
	return &horizontalPodAutoscalerClusterLister{
		kcplisters.NewCluster[*autoscalingv2beta2.HorizontalPodAutoscaler](indexer, autoscalingv2beta2.Resource("horizontalpodautoscaler")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get HorizontalPodAutoscalers.
func (l *horizontalPodAutoscalerClusterLister) Cluster(clusterName logicalcluster.Name) listersautoscalingv2beta2.HorizontalPodAutoscalerLister {
	return &horizontalPodAutoscalerLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// horizontalPodAutoscalerLister can list all HorizontalPodAutoscalers inside a workspace
// or scope down to a listersautoscalingv2beta2.HorizontalPodAutoscalerNamespaceLister for one namespace.
type horizontalPodAutoscalerLister struct {
	kcplisters.ResourceIndexer[*autoscalingv2beta2.HorizontalPodAutoscaler]
}

var _ listersautoscalingv2beta2.HorizontalPodAutoscalerLister = new(horizontalPodAutoscalerLister)

// HorizontalPodAutoscalers returns an object that can list and get HorizontalPodAutoscalers in one namespace.
func (l *horizontalPodAutoscalerLister) HorizontalPodAutoscalers(namespace string) listersautoscalingv2beta2.HorizontalPodAutoscalerNamespaceLister {
	return &horizontalPodAutoscalerNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// horizontalPodAutoscalerNamespaceLister implements the listersautoscalingv2beta2.HorizontalPodAutoscalerNamespaceLister
// interface.
type horizontalPodAutoscalerNamespaceLister struct {
	kcplisters.ResourceIndexer[*autoscalingv2beta2.HorizontalPodAutoscaler]
}

var _ listersautoscalingv2beta2.HorizontalPodAutoscalerNamespaceLister = new(horizontalPodAutoscalerNamespaceLister)

// NewHorizontalPodAutoscalerLister returns a new HorizontalPodAutoscalerLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewHorizontalPodAutoscalerLister(indexer cache.Indexer) listersautoscalingv2beta2.HorizontalPodAutoscalerLister {
	return &horizontalPodAutoscalerLister{
		kcplisters.New[*autoscalingv2beta2.HorizontalPodAutoscaler](indexer, autoscalingv2beta2.Resource("horizontalpodautoscaler")),
	}
}

// horizontalPodAutoscalerScopedLister can list all HorizontalPodAutoscalers inside a workspace
// or scope down to a listersautoscalingv2beta2.HorizontalPodAutoscalerNamespaceLister for one namespace.
type horizontalPodAutoscalerScopedLister struct {
	kcplisters.ResourceIndexer[*autoscalingv2beta2.HorizontalPodAutoscaler]
}

// HorizontalPodAutoscalers returns an object that can list and get HorizontalPodAutoscalers in one namespace.
func (l *horizontalPodAutoscalerScopedLister) HorizontalPodAutoscalers(namespace string) listersautoscalingv2beta2.HorizontalPodAutoscalerLister {
	return &horizontalPodAutoscalerLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
