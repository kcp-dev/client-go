/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	nodev1 "k8s.io/api/node/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersnodev1 "k8s.io/client-go/listers/node/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// RuntimeClassClusterLister helps list RuntimeClasses across all workspaces,
// or scope down to a RuntimeClassLister for one workspace.
// All objects returned here must be treated as read-only.
type RuntimeClassClusterLister interface {
	// List lists all RuntimeClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*nodev1.RuntimeClass, err error)
	// Cluster returns a lister that can list and get RuntimeClasses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersnodev1.RuntimeClassLister
	RuntimeClassClusterListerExpansion
}

// runtimeClassClusterLister implements the RuntimeClassClusterLister interface.
type runtimeClassClusterLister struct {
	kcplisters.ResourceClusterIndexer[*nodev1.RuntimeClass]
}

var _ RuntimeClassClusterLister = new(runtimeClassClusterLister)

// NewRuntimeClassClusterLister returns a new RuntimeClassClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewRuntimeClassClusterLister(indexer cache.Indexer) RuntimeClassClusterLister {
	return &runtimeClassClusterLister{
		kcplisters.NewCluster[*nodev1.RuntimeClass](indexer, nodev1.Resource("runtimeclass")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get RuntimeClasses.
func (l *runtimeClassClusterLister) Cluster(clusterName logicalcluster.Name) listersnodev1.RuntimeClassLister {
	return &runtimeClassLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// runtimeClassLister can list all RuntimeClasses inside a workspace
// or scope down to a listersnodev1.RuntimeClassNamespaceLister for one namespace.
type runtimeClassLister struct {
	kcplisters.ResourceIndexer[*nodev1.RuntimeClass]
}

var _ listersnodev1.RuntimeClassLister = new(runtimeClassLister)

// NewRuntimeClassLister returns a new RuntimeClassLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewRuntimeClassLister(indexer cache.Indexer) listersnodev1.RuntimeClassLister {
	return &runtimeClassLister{
		kcplisters.New[*nodev1.RuntimeClass](indexer, nodev1.Resource("runtimeclass")),
	}
}

// runtimeClassScopedLister can list all RuntimeClasses inside a workspace
// or scope down to a listersnodev1.RuntimeClassNamespaceLister.
type runtimeClassScopedLister struct {
	kcplisters.ResourceIndexer[*nodev1.RuntimeClass]
}
