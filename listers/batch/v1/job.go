/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	batchv1 "k8s.io/api/batch/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersbatchv1 "k8s.io/client-go/listers/batch/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// JobClusterLister helps list Jobs across all workspaces,
// or scope down to a JobLister for one workspace.
// All objects returned here must be treated as read-only.
type JobClusterLister interface {
	// List lists all Jobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*batchv1.Job, err error)
	// Cluster returns a lister that can list and get Jobs in one workspace.
	Cluster(clusterName logicalcluster.Name) listersbatchv1.JobLister
	JobClusterListerExpansion
}

// jobClusterLister implements the JobClusterLister interface.
type jobClusterLister struct {
	kcplisters.ResourceClusterIndexer[*batchv1.Job]
}

var _ JobClusterLister = new(jobClusterLister)

// NewJobClusterLister returns a new JobClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewJobClusterLister(indexer cache.Indexer) JobClusterLister {
	return &jobClusterLister{
		kcplisters.NewCluster[*batchv1.Job](indexer, batchv1.Resource("job")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Jobs.
func (l *jobClusterLister) Cluster(clusterName logicalcluster.Name) listersbatchv1.JobLister {
	return &jobLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// jobLister can list all Jobs inside a workspace
// or scope down to a listersbatchv1.JobNamespaceLister for one namespace.
type jobLister struct {
	kcplisters.ResourceIndexer[*batchv1.Job]
}

var _ listersbatchv1.JobLister = new(jobLister)

// Jobs returns an object that can list and get Jobs in one namespace.
func (l *jobLister) Jobs(namespace string) listersbatchv1.JobNamespaceLister {
	return &jobNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// jobNamespaceLister implements the listersbatchv1.JobNamespaceLister
// interface.
type jobNamespaceLister struct {
	kcplisters.ResourceIndexer[*batchv1.Job]
}

var _ listersbatchv1.JobNamespaceLister = new(jobNamespaceLister)

// NewJobLister returns a new JobLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewJobLister(indexer cache.Indexer) listersbatchv1.JobLister {
	return &jobLister{
		kcplisters.New[*batchv1.Job](indexer, batchv1.Resource("job")),
	}
}

// jobScopedLister can list all Jobs inside a workspace
// or scope down to a listersbatchv1.JobNamespaceLister for one namespace.
type jobScopedLister struct {
	kcplisters.ResourceIndexer[*batchv1.Job]
}

// Jobs returns an object that can list and get Jobs in one namespace.
func (l *jobScopedLister) Jobs(namespace string) listersbatchv1.JobLister {
	return &jobLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
