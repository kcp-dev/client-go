/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	batchv1beta1 "k8s.io/api/batch/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersbatchv1beta1 "k8s.io/client-go/listers/batch/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// CronJobClusterLister helps list CronJobs across all workspaces,
// or scope down to a CronJobLister for one workspace.
// All objects returned here must be treated as read-only.
type CronJobClusterLister interface {
	// List lists all CronJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*batchv1beta1.CronJob, err error)
	// Cluster returns a lister that can list and get CronJobs in one workspace.
	Cluster(clusterName logicalcluster.Name) listersbatchv1beta1.CronJobLister
	CronJobClusterListerExpansion
}

// cronJobClusterLister implements the CronJobClusterLister interface.
type cronJobClusterLister struct {
	kcplisters.ResourceClusterIndexer[*batchv1beta1.CronJob]
}

var _ CronJobClusterLister = new(cronJobClusterLister)

// NewCronJobClusterLister returns a new CronJobClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCronJobClusterLister(indexer cache.Indexer) CronJobClusterLister {
	return &cronJobClusterLister{
		kcplisters.NewCluster[*batchv1beta1.CronJob](indexer, batchv1beta1.Resource("cronjob")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get CronJobs.
func (l *cronJobClusterLister) Cluster(clusterName logicalcluster.Name) listersbatchv1beta1.CronJobLister {
	return &cronJobLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// cronJobLister can list all CronJobs inside a workspace
// or scope down to a listersbatchv1beta1.CronJobNamespaceLister for one namespace.
type cronJobLister struct {
	kcplisters.ResourceIndexer[*batchv1beta1.CronJob]
}

var _ listersbatchv1beta1.CronJobLister = new(cronJobLister)

// CronJobs returns an object that can list and get CronJobs in one namespace.
func (l *cronJobLister) CronJobs(namespace string) listersbatchv1beta1.CronJobNamespaceLister {
	return &cronJobNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// cronJobNamespaceLister implements the listersbatchv1beta1.CronJobNamespaceLister
// interface.
type cronJobNamespaceLister struct {
	kcplisters.ResourceIndexer[*batchv1beta1.CronJob]
}

var _ listersbatchv1beta1.CronJobNamespaceLister = new(cronJobNamespaceLister)

// NewCronJobLister returns a new CronJobLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewCronJobLister(indexer cache.Indexer) listersbatchv1beta1.CronJobLister {
	return &cronJobLister{
		kcplisters.New[*batchv1beta1.CronJob](indexer, batchv1beta1.Resource("cronjob")),
	}
}

// cronJobScopedLister can list all CronJobs inside a workspace
// or scope down to a listersbatchv1beta1.CronJobNamespaceLister for one namespace.
type cronJobScopedLister struct {
	kcplisters.ResourceIndexer[*batchv1beta1.CronJob]
}

// CronJobs returns an object that can list and get CronJobs in one namespace.
func (l *cronJobScopedLister) CronJobs(namespace string) listersbatchv1beta1.CronJobLister {
	return &cronJobLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
