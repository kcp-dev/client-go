/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	imagepolicyv1alpha1 "k8s.io/api/imagepolicy/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	listersimagepolicyv1alpha1 "k8s.io/client-go/listers/imagepolicy/v1alpha1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ImageReviewClusterLister helps list ImageReviews across all workspaces,
// or scope down to a ImageReviewLister for one workspace.
// All objects returned here must be treated as read-only.
type ImageReviewClusterLister interface {
	// List lists all ImageReviews in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*imagepolicyv1alpha1.ImageReview, err error)
	// Cluster returns a lister that can list and get ImageReviews in one workspace.
	Cluster(clusterName logicalcluster.Name) listersimagepolicyv1alpha1.ImageReviewLister
	ImageReviewClusterListerExpansion
}

// imageReviewClusterLister implements the ImageReviewClusterLister interface.
type imageReviewClusterLister struct {
	kcplisters.ResourceClusterIndexer[*imagepolicyv1alpha1.ImageReview]
}

var _ ImageReviewClusterLister = new(imageReviewClusterLister)

// NewImageReviewClusterLister returns a new ImageReviewClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewImageReviewClusterLister(indexer cache.Indexer) ImageReviewClusterLister {
	return &imageReviewClusterLister{
		kcplisters.NewCluster[*imagepolicyv1alpha1.ImageReview](indexer, imagepolicyv1alpha1.Resource("imagereview")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ImageReviews.
func (l *imageReviewClusterLister) Cluster(clusterName logicalcluster.Name) listersimagepolicyv1alpha1.ImageReviewLister {
	return &imageReviewLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// imageReviewLister can list all ImageReviews inside a workspace
// or scope down to a listersimagepolicyv1alpha1.ImageReviewNamespaceLister for one namespace.
type imageReviewLister struct {
	kcplisters.ResourceIndexer[*imagepolicyv1alpha1.ImageReview]
}

var _ listersimagepolicyv1alpha1.ImageReviewLister = new(imageReviewLister)

// NewImageReviewLister returns a new ImageReviewLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewImageReviewLister(indexer cache.Indexer) listersimagepolicyv1alpha1.ImageReviewLister {
	return &imageReviewLister{
		kcplisters.New[*imagepolicyv1alpha1.ImageReview](indexer, imagepolicyv1alpha1.Resource("imagereview")),
	}
}

// imageReviewScopedLister can list all ImageReviews inside a workspace
// or scope down to a listersimagepolicyv1alpha1.ImageReviewNamespaceLister.
type imageReviewScopedLister struct {
	kcplisters.ResourceIndexer[*imagepolicyv1alpha1.ImageReview]
}
