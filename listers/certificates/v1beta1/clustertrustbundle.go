/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	certificatesv1beta1 "k8s.io/api/certificates/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listerscertificatesv1beta1 "k8s.io/client-go/listers/certificates/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ClusterTrustBundleClusterLister helps list ClusterTrustBundles across all workspaces,
// or scope down to a ClusterTrustBundleLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterTrustBundleClusterLister interface {
	// List lists all ClusterTrustBundles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*certificatesv1beta1.ClusterTrustBundle, err error)
	// Cluster returns a lister that can list and get ClusterTrustBundles in one workspace.
	Cluster(clusterName logicalcluster.Name) listerscertificatesv1beta1.ClusterTrustBundleLister
	ClusterTrustBundleClusterListerExpansion
}

// clusterTrustBundleClusterLister implements the ClusterTrustBundleClusterLister interface.
type clusterTrustBundleClusterLister struct {
	kcplisters.ResourceClusterIndexer[*certificatesv1beta1.ClusterTrustBundle]
}

var _ ClusterTrustBundleClusterLister = new(clusterTrustBundleClusterLister)

// NewClusterTrustBundleClusterLister returns a new ClusterTrustBundleClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterTrustBundleClusterLister(indexer cache.Indexer) ClusterTrustBundleClusterLister {
	return &clusterTrustBundleClusterLister{
		kcplisters.NewCluster[*certificatesv1beta1.ClusterTrustBundle](indexer, certificatesv1beta1.Resource("clustertrustbundle")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterTrustBundles.
func (l *clusterTrustBundleClusterLister) Cluster(clusterName logicalcluster.Name) listerscertificatesv1beta1.ClusterTrustBundleLister {
	return &clusterTrustBundleLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// clusterTrustBundleLister can list all ClusterTrustBundles inside a workspace
// or scope down to a listerscertificatesv1beta1.ClusterTrustBundleNamespaceLister for one namespace.
type clusterTrustBundleLister struct {
	kcplisters.ResourceIndexer[*certificatesv1beta1.ClusterTrustBundle]
}

var _ listerscertificatesv1beta1.ClusterTrustBundleLister = new(clusterTrustBundleLister)

// NewClusterTrustBundleLister returns a new ClusterTrustBundleLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterTrustBundleLister(indexer cache.Indexer) listerscertificatesv1beta1.ClusterTrustBundleLister {
	return &clusterTrustBundleLister{
		kcplisters.New[*certificatesv1beta1.ClusterTrustBundle](indexer, certificatesv1beta1.Resource("clustertrustbundle")),
	}
}

// clusterTrustBundleScopedLister can list all ClusterTrustBundles inside a workspace
// or scope down to a listerscertificatesv1beta1.ClusterTrustBundleNamespaceLister.
type clusterTrustBundleScopedLister struct {
	kcplisters.ResourceIndexer[*certificatesv1beta1.ClusterTrustBundle]
}
