/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	rbacv1 "k8s.io/api/rbac/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersrbacv1 "k8s.io/client-go/listers/rbac/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// RoleClusterLister helps list Roles across all workspaces,
// or scope down to a RoleLister for one workspace.
// All objects returned here must be treated as read-only.
type RoleClusterLister interface {
	// List lists all Roles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*rbacv1.Role, err error)
	// Cluster returns a lister that can list and get Roles in one workspace.
	Cluster(clusterName logicalcluster.Name) listersrbacv1.RoleLister
	RoleClusterListerExpansion
}

// roleClusterLister implements the RoleClusterLister interface.
type roleClusterLister struct {
	kcplisters.ResourceClusterIndexer[*rbacv1.Role]
}

var _ RoleClusterLister = new(roleClusterLister)

// NewRoleClusterLister returns a new RoleClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewRoleClusterLister(indexer cache.Indexer) RoleClusterLister {
	return &roleClusterLister{
		kcplisters.NewCluster[*rbacv1.Role](indexer, rbacv1.Resource("role")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Roles.
func (l *roleClusterLister) Cluster(clusterName logicalcluster.Name) listersrbacv1.RoleLister {
	return &roleLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// roleLister can list all Roles inside a workspace
// or scope down to a listersrbacv1.RoleNamespaceLister for one namespace.
type roleLister struct {
	kcplisters.ResourceIndexer[*rbacv1.Role]
}

var _ listersrbacv1.RoleLister = new(roleLister)

// Roles returns an object that can list and get Roles in one namespace.
func (l *roleLister) Roles(namespace string) listersrbacv1.RoleNamespaceLister {
	return &roleNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// roleNamespaceLister implements the listersrbacv1.RoleNamespaceLister
// interface.
type roleNamespaceLister struct {
	kcplisters.ResourceIndexer[*rbacv1.Role]
}

var _ listersrbacv1.RoleNamespaceLister = new(roleNamespaceLister)

// NewRoleLister returns a new RoleLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewRoleLister(indexer cache.Indexer) listersrbacv1.RoleLister {
	return &roleLister{
		kcplisters.New[*rbacv1.Role](indexer, rbacv1.Resource("role")),
	}
}

// roleScopedLister can list all Roles inside a workspace
// or scope down to a listersrbacv1.RoleNamespaceLister for one namespace.
type roleScopedLister struct {
	kcplisters.ResourceIndexer[*rbacv1.Role]
}

// Roles returns an object that can list and get Roles in one namespace.
func (l *roleScopedLister) Roles(namespace string) listersrbacv1.RoleLister {
	return &roleLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
