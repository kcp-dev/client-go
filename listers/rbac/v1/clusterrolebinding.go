/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	rbacv1 "k8s.io/api/rbac/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersrbacv1 "k8s.io/client-go/listers/rbac/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ClusterRoleBindingClusterLister helps list ClusterRoleBindings across all workspaces,
// or scope down to a ClusterRoleBindingLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterRoleBindingClusterLister interface {
	// List lists all ClusterRoleBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*rbacv1.ClusterRoleBinding, err error)
	// Cluster returns a lister that can list and get ClusterRoleBindings in one workspace.
	Cluster(clusterName logicalcluster.Name) listersrbacv1.ClusterRoleBindingLister
	ClusterRoleBindingClusterListerExpansion
}

// clusterRoleBindingClusterLister implements the ClusterRoleBindingClusterLister interface.
type clusterRoleBindingClusterLister struct {
	kcplisters.ResourceClusterIndexer[*rbacv1.ClusterRoleBinding]
}

var _ ClusterRoleBindingClusterLister = new(clusterRoleBindingClusterLister)

// NewClusterRoleBindingClusterLister returns a new ClusterRoleBindingClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterRoleBindingClusterLister(indexer cache.Indexer) ClusterRoleBindingClusterLister {
	return &clusterRoleBindingClusterLister{
		kcplisters.NewCluster[*rbacv1.ClusterRoleBinding](indexer, rbacv1.Resource("clusterrolebinding")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ClusterRoleBindings.
func (l *clusterRoleBindingClusterLister) Cluster(clusterName logicalcluster.Name) listersrbacv1.ClusterRoleBindingLister {
	return &clusterRoleBindingLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// clusterRoleBindingLister can list all ClusterRoleBindings inside a workspace
// or scope down to a listersrbacv1.ClusterRoleBindingNamespaceLister for one namespace.
type clusterRoleBindingLister struct {
	kcplisters.ResourceIndexer[*rbacv1.ClusterRoleBinding]
}

var _ listersrbacv1.ClusterRoleBindingLister = new(clusterRoleBindingLister)

// NewClusterRoleBindingLister returns a new ClusterRoleBindingLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterRoleBindingLister(indexer cache.Indexer) listersrbacv1.ClusterRoleBindingLister {
	return &clusterRoleBindingLister{
		kcplisters.New[*rbacv1.ClusterRoleBinding](indexer, rbacv1.Resource("clusterrolebinding")),
	}
}

// clusterRoleBindingScopedLister can list all ClusterRoleBindings inside a workspace
// or scope down to a listersrbacv1.ClusterRoleBindingNamespaceLister.
type clusterRoleBindingScopedLister struct {
	kcplisters.ResourceIndexer[*rbacv1.ClusterRoleBinding]
}
