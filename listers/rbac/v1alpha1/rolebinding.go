/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha1

import (
	rbacv1alpha1 "k8s.io/api/rbac/v1alpha1"
	"k8s.io/apimachinery/pkg/labels"
	listersrbacv1alpha1 "k8s.io/client-go/listers/rbac/v1alpha1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// RoleBindingClusterLister helps list RoleBindings across all workspaces,
// or scope down to a RoleBindingLister for one workspace.
// All objects returned here must be treated as read-only.
type RoleBindingClusterLister interface {
	// List lists all RoleBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*rbacv1alpha1.RoleBinding, err error)
	// Cluster returns a lister that can list and get RoleBindings in one workspace.
	Cluster(clusterName logicalcluster.Name) listersrbacv1alpha1.RoleBindingLister
	RoleBindingClusterListerExpansion
}

// roleBindingClusterLister implements the RoleBindingClusterLister interface.
type roleBindingClusterLister struct {
	kcplisters.ResourceClusterIndexer[*rbacv1alpha1.RoleBinding]
}

var _ RoleBindingClusterLister = new(roleBindingClusterLister)

// NewRoleBindingClusterLister returns a new RoleBindingClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewRoleBindingClusterLister(indexer cache.Indexer) RoleBindingClusterLister {
	return &roleBindingClusterLister{
		kcplisters.NewCluster[*rbacv1alpha1.RoleBinding](indexer, rbacv1alpha1.Resource("rolebinding")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get RoleBindings.
func (l *roleBindingClusterLister) Cluster(clusterName logicalcluster.Name) listersrbacv1alpha1.RoleBindingLister {
	return &roleBindingLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// roleBindingLister can list all RoleBindings inside a workspace
// or scope down to a listersrbacv1alpha1.RoleBindingNamespaceLister for one namespace.
type roleBindingLister struct {
	kcplisters.ResourceIndexer[*rbacv1alpha1.RoleBinding]
}

var _ listersrbacv1alpha1.RoleBindingLister = new(roleBindingLister)

// RoleBindings returns an object that can list and get RoleBindings in one namespace.
func (l *roleBindingLister) RoleBindings(namespace string) listersrbacv1alpha1.RoleBindingNamespaceLister {
	return &roleBindingNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// roleBindingNamespaceLister implements the listersrbacv1alpha1.RoleBindingNamespaceLister
// interface.
type roleBindingNamespaceLister struct {
	kcplisters.ResourceIndexer[*rbacv1alpha1.RoleBinding]
}

var _ listersrbacv1alpha1.RoleBindingNamespaceLister = new(roleBindingNamespaceLister)

// NewRoleBindingLister returns a new RoleBindingLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewRoleBindingLister(indexer cache.Indexer) listersrbacv1alpha1.RoleBindingLister {
	return &roleBindingLister{
		kcplisters.New[*rbacv1alpha1.RoleBinding](indexer, rbacv1alpha1.Resource("rolebinding")),
	}
}

// roleBindingScopedLister can list all RoleBindings inside a workspace
// or scope down to a listersrbacv1alpha1.RoleBindingNamespaceLister for one namespace.
type roleBindingScopedLister struct {
	kcplisters.ResourceIndexer[*rbacv1alpha1.RoleBinding]
}

// RoleBindings returns an object that can list and get RoleBindings in one namespace.
func (l *roleBindingScopedLister) RoleBindings(namespace string) listersrbacv1alpha1.RoleBindingLister {
	return &roleBindingLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
