/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha3

import (
	resourcev1alpha3 "k8s.io/api/resource/v1alpha3"
	"k8s.io/apimachinery/pkg/labels"
	listersresourcev1alpha3 "k8s.io/client-go/listers/resource/v1alpha3"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// DeviceTaintRuleClusterLister helps list DeviceTaintRules across all workspaces,
// or scope down to a DeviceTaintRuleLister for one workspace.
// All objects returned here must be treated as read-only.
type DeviceTaintRuleClusterLister interface {
	// List lists all DeviceTaintRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1alpha3.DeviceTaintRule, err error)
	// Cluster returns a lister that can list and get DeviceTaintRules in one workspace.
	Cluster(clusterName logicalcluster.Name) listersresourcev1alpha3.DeviceTaintRuleLister
	DeviceTaintRuleClusterListerExpansion
}

// deviceTaintRuleClusterLister implements the DeviceTaintRuleClusterLister interface.
type deviceTaintRuleClusterLister struct {
	kcplisters.ResourceClusterIndexer[*resourcev1alpha3.DeviceTaintRule]
}

var _ DeviceTaintRuleClusterLister = new(deviceTaintRuleClusterLister)

// NewDeviceTaintRuleClusterLister returns a new DeviceTaintRuleClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewDeviceTaintRuleClusterLister(indexer cache.Indexer) DeviceTaintRuleClusterLister {
	return &deviceTaintRuleClusterLister{
		kcplisters.NewCluster[*resourcev1alpha3.DeviceTaintRule](indexer, resourcev1alpha3.Resource("devicetaintrule")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get DeviceTaintRules.
func (l *deviceTaintRuleClusterLister) Cluster(clusterName logicalcluster.Name) listersresourcev1alpha3.DeviceTaintRuleLister {
	return &deviceTaintRuleLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// deviceTaintRuleLister can list all DeviceTaintRules inside a workspace
// or scope down to a listersresourcev1alpha3.DeviceTaintRuleNamespaceLister for one namespace.
type deviceTaintRuleLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.DeviceTaintRule]
}

var _ listersresourcev1alpha3.DeviceTaintRuleLister = new(deviceTaintRuleLister)

// NewDeviceTaintRuleLister returns a new DeviceTaintRuleLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewDeviceTaintRuleLister(indexer cache.Indexer) listersresourcev1alpha3.DeviceTaintRuleLister {
	return &deviceTaintRuleLister{
		kcplisters.New[*resourcev1alpha3.DeviceTaintRule](indexer, resourcev1alpha3.Resource("devicetaintrule")),
	}
}

// deviceTaintRuleScopedLister can list all DeviceTaintRules inside a workspace
// or scope down to a listersresourcev1alpha3.DeviceTaintRuleNamespaceLister.
type deviceTaintRuleScopedLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.DeviceTaintRule]
}
