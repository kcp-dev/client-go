/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha3

import (
	resourcev1alpha3 "k8s.io/api/resource/v1alpha3"
	"k8s.io/apimachinery/pkg/labels"
	listersresourcev1alpha3 "k8s.io/client-go/listers/resource/v1alpha3"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ResourceClaimTemplateClusterLister helps list ResourceClaimTemplates across all workspaces,
// or scope down to a ResourceClaimTemplateLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceClaimTemplateClusterLister interface {
	// List lists all ResourceClaimTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1alpha3.ResourceClaimTemplate, err error)
	// Cluster returns a lister that can list and get ResourceClaimTemplates in one workspace.
	Cluster(clusterName logicalcluster.Name) listersresourcev1alpha3.ResourceClaimTemplateLister
	ResourceClaimTemplateClusterListerExpansion
}

// resourceClaimTemplateClusterLister implements the ResourceClaimTemplateClusterLister interface.
type resourceClaimTemplateClusterLister struct {
	kcplisters.ResourceClusterIndexer[*resourcev1alpha3.ResourceClaimTemplate]
}

var _ ResourceClaimTemplateClusterLister = new(resourceClaimTemplateClusterLister)

// NewResourceClaimTemplateClusterLister returns a new ResourceClaimTemplateClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceClaimTemplateClusterLister(indexer cache.Indexer) ResourceClaimTemplateClusterLister {
	return &resourceClaimTemplateClusterLister{
		kcplisters.NewCluster[*resourcev1alpha3.ResourceClaimTemplate](indexer, resourcev1alpha3.Resource("resourceclaimtemplate")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceClaimTemplates.
func (l *resourceClaimTemplateClusterLister) Cluster(clusterName logicalcluster.Name) listersresourcev1alpha3.ResourceClaimTemplateLister {
	return &resourceClaimTemplateLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// resourceClaimTemplateLister can list all ResourceClaimTemplates inside a workspace
// or scope down to a listersresourcev1alpha3.ResourceClaimTemplateNamespaceLister for one namespace.
type resourceClaimTemplateLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.ResourceClaimTemplate]
}

var _ listersresourcev1alpha3.ResourceClaimTemplateLister = new(resourceClaimTemplateLister)

// ResourceClaimTemplates returns an object that can list and get ResourceClaimTemplates in one namespace.
func (l *resourceClaimTemplateLister) ResourceClaimTemplates(namespace string) listersresourcev1alpha3.ResourceClaimTemplateNamespaceLister {
	return &resourceClaimTemplateNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// resourceClaimTemplateNamespaceLister implements the listersresourcev1alpha3.ResourceClaimTemplateNamespaceLister
// interface.
type resourceClaimTemplateNamespaceLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.ResourceClaimTemplate]
}

var _ listersresourcev1alpha3.ResourceClaimTemplateNamespaceLister = new(resourceClaimTemplateNamespaceLister)

// NewResourceClaimTemplateLister returns a new ResourceClaimTemplateLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceClaimTemplateLister(indexer cache.Indexer) listersresourcev1alpha3.ResourceClaimTemplateLister {
	return &resourceClaimTemplateLister{
		kcplisters.New[*resourcev1alpha3.ResourceClaimTemplate](indexer, resourcev1alpha3.Resource("resourceclaimtemplate")),
	}
}

// resourceClaimTemplateScopedLister can list all ResourceClaimTemplates inside a workspace
// or scope down to a listersresourcev1alpha3.ResourceClaimTemplateNamespaceLister for one namespace.
type resourceClaimTemplateScopedLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.ResourceClaimTemplate]
}

// ResourceClaimTemplates returns an object that can list and get ResourceClaimTemplates in one namespace.
func (l *resourceClaimTemplateScopedLister) ResourceClaimTemplates(namespace string) listersresourcev1alpha3.ResourceClaimTemplateLister {
	return &resourceClaimTemplateLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
