/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1alpha3

import (
	"github.com/kcp-dev/logicalcluster/v3"

	resourcev1alpha3 "k8s.io/api/resource/v1alpha3"
	"k8s.io/apimachinery/pkg/labels"
	listersresourcev1alpha3 "k8s.io/client-go/listers/resource/v1alpha3"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// ResourceSliceClusterLister helps list ResourceSlices across all workspaces,
// or scope down to a ResourceSliceLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceSliceClusterLister interface {
	// List lists all ResourceSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1alpha3.ResourceSlice, err error)
	// Cluster returns a lister that can list and get ResourceSlices in one workspace.
	Cluster(clusterName logicalcluster.Name) listersresourcev1alpha3.ResourceSliceLister
	ResourceSliceClusterListerExpansion
}

// resourceSliceClusterLister implements the ResourceSliceClusterLister interface.
type resourceSliceClusterLister struct {
	kcplisters.ResourceClusterIndexer[*resourcev1alpha3.ResourceSlice]
}

var _ ResourceSliceClusterLister = new(resourceSliceClusterLister)

// NewResourceSliceClusterLister returns a new ResourceSliceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewResourceSliceClusterLister(indexer cache.Indexer) ResourceSliceClusterLister {
	return &resourceSliceClusterLister{
		kcplisters.NewCluster[*resourcev1alpha3.ResourceSlice](indexer, resourcev1alpha3.Resource("resourceslice")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceSlices.
func (l *resourceSliceClusterLister) Cluster(clusterName logicalcluster.Name) listersresourcev1alpha3.ResourceSliceLister {
	return &resourceSliceLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// resourceSliceLister can list all ResourceSlices inside a workspace
// or scope down to a listersresourcev1alpha3.ResourceSliceNamespaceLister for one namespace.
type resourceSliceLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.ResourceSlice]
}

var _ listersresourcev1alpha3.ResourceSliceLister = new(resourceSliceLister)

// NewResourceSliceLister returns a new ResourceSliceLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewResourceSliceLister(indexer cache.Indexer) listersresourcev1alpha3.ResourceSliceLister {
	return &resourceSliceLister{
		kcplisters.New[*resourcev1alpha3.ResourceSlice](indexer, resourcev1alpha3.Resource("resourceslice")),
	}
}

// resourceSliceScopedLister can list all ResourceSlices inside a workspace
// or scope down to a listersresourcev1alpha3.ResourceSliceNamespaceLister.
type resourceSliceScopedLister struct {
	kcplisters.ResourceIndexer[*resourcev1alpha3.ResourceSlice]
}
