/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	resourcev1beta1 "k8s.io/api/resource/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listersresourcev1beta1 "k8s.io/client-go/listers/resource/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// ResourceClaimClusterLister helps list ResourceClaims across all workspaces,
// or scope down to a ResourceClaimLister for one workspace.
// All objects returned here must be treated as read-only.
type ResourceClaimClusterLister interface {
	// List lists all ResourceClaims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1beta1.ResourceClaim, err error)
	// Cluster returns a lister that can list and get ResourceClaims in one workspace.
	Cluster(clusterName logicalcluster.Name) listersresourcev1beta1.ResourceClaimLister
	ResourceClaimClusterListerExpansion
}

// resourceClaimClusterLister implements the ResourceClaimClusterLister interface.
type resourceClaimClusterLister struct {
	kcplisters.ResourceClusterIndexer[*resourcev1beta1.ResourceClaim]
}

var _ ResourceClaimClusterLister = new(resourceClaimClusterLister)

// NewResourceClaimClusterLister returns a new ResourceClaimClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceClaimClusterLister(indexer cache.Indexer) ResourceClaimClusterLister {
	return &resourceClaimClusterLister{
		kcplisters.NewCluster[*resourcev1beta1.ResourceClaim](indexer, resourcev1beta1.Resource("resourceclaim")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get ResourceClaims.
func (l *resourceClaimClusterLister) Cluster(clusterName logicalcluster.Name) listersresourcev1beta1.ResourceClaimLister {
	return &resourceClaimLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// resourceClaimLister can list all ResourceClaims inside a workspace
// or scope down to a listersresourcev1beta1.ResourceClaimNamespaceLister for one namespace.
type resourceClaimLister struct {
	kcplisters.ResourceIndexer[*resourcev1beta1.ResourceClaim]
}

var _ listersresourcev1beta1.ResourceClaimLister = new(resourceClaimLister)

// ResourceClaims returns an object that can list and get ResourceClaims in one namespace.
func (l *resourceClaimLister) ResourceClaims(namespace string) listersresourcev1beta1.ResourceClaimNamespaceLister {
	return &resourceClaimNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// resourceClaimNamespaceLister implements the listersresourcev1beta1.ResourceClaimNamespaceLister
// interface.
type resourceClaimNamespaceLister struct {
	kcplisters.ResourceIndexer[*resourcev1beta1.ResourceClaim]
}

var _ listersresourcev1beta1.ResourceClaimNamespaceLister = new(resourceClaimNamespaceLister)

// NewResourceClaimLister returns a new ResourceClaimLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewResourceClaimLister(indexer cache.Indexer) listersresourcev1beta1.ResourceClaimLister {
	return &resourceClaimLister{
		kcplisters.New[*resourcev1beta1.ResourceClaim](indexer, resourcev1beta1.Resource("resourceclaim")),
	}
}

// resourceClaimScopedLister can list all ResourceClaims inside a workspace
// or scope down to a listersresourcev1beta1.ResourceClaimNamespaceLister for one namespace.
type resourceClaimScopedLister struct {
	kcplisters.ResourceIndexer[*resourcev1beta1.ResourceClaim]
}

// ResourceClaims returns an object that can list and get ResourceClaims in one namespace.
func (l *resourceClaimScopedLister) ResourceClaims(namespace string) listersresourcev1beta1.ResourceClaimLister {
	return &resourceClaimLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
