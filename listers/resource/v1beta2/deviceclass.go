/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta2

import (
	resourcev1beta2 "k8s.io/api/resource/v1beta2"
	"k8s.io/apimachinery/pkg/labels"
	listersresourcev1beta2 "k8s.io/client-go/listers/resource/v1beta2"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// DeviceClassClusterLister helps list DeviceClasses across all workspaces,
// or scope down to a DeviceClassLister for one workspace.
// All objects returned here must be treated as read-only.
type DeviceClassClusterLister interface {
	// List lists all DeviceClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*resourcev1beta2.DeviceClass, err error)
	// Cluster returns a lister that can list and get DeviceClasses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersresourcev1beta2.DeviceClassLister
	DeviceClassClusterListerExpansion
}

// deviceClassClusterLister implements the DeviceClassClusterLister interface.
type deviceClassClusterLister struct {
	kcplisters.ResourceClusterIndexer[*resourcev1beta2.DeviceClass]
}

var _ DeviceClassClusterLister = new(deviceClassClusterLister)

// NewDeviceClassClusterLister returns a new DeviceClassClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewDeviceClassClusterLister(indexer cache.Indexer) DeviceClassClusterLister {
	return &deviceClassClusterLister{
		kcplisters.NewCluster[*resourcev1beta2.DeviceClass](indexer, resourcev1beta2.Resource("deviceclass")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get DeviceClasses.
func (l *deviceClassClusterLister) Cluster(clusterName logicalcluster.Name) listersresourcev1beta2.DeviceClassLister {
	return &deviceClassLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// deviceClassLister can list all DeviceClasses inside a workspace
// or scope down to a listersresourcev1beta2.DeviceClassNamespaceLister for one namespace.
type deviceClassLister struct {
	kcplisters.ResourceIndexer[*resourcev1beta2.DeviceClass]
}

var _ listersresourcev1beta2.DeviceClassLister = new(deviceClassLister)

// NewDeviceClassLister returns a new DeviceClassLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewDeviceClassLister(indexer cache.Indexer) listersresourcev1beta2.DeviceClassLister {
	return &deviceClassLister{
		kcplisters.New[*resourcev1beta2.DeviceClass](indexer, resourcev1beta2.Resource("deviceclass")),
	}
}

// deviceClassScopedLister can list all DeviceClasses inside a workspace
// or scope down to a listersresourcev1beta2.DeviceClassNamespaceLister.
type deviceClassScopedLister struct {
	kcplisters.ResourceIndexer[*resourcev1beta2.DeviceClass]
}
