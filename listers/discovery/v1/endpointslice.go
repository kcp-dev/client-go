/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	discoveryv1 "k8s.io/api/discovery/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersdiscoveryv1 "k8s.io/client-go/listers/discovery/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// EndpointSliceClusterLister helps list EndpointSlices across all workspaces,
// or scope down to a EndpointSliceLister for one workspace.
// All objects returned here must be treated as read-only.
type EndpointSliceClusterLister interface {
	// List lists all EndpointSlices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*discoveryv1.EndpointSlice, err error)
	// Cluster returns a lister that can list and get EndpointSlices in one workspace.
	Cluster(clusterName logicalcluster.Name) listersdiscoveryv1.EndpointSliceLister
	EndpointSliceClusterListerExpansion
}

// endpointSliceClusterLister implements the EndpointSliceClusterLister interface.
type endpointSliceClusterLister struct {
	kcplisters.ResourceClusterIndexer[*discoveryv1.EndpointSlice]
}

var _ EndpointSliceClusterLister = new(endpointSliceClusterLister)

// NewEndpointSliceClusterLister returns a new EndpointSliceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEndpointSliceClusterLister(indexer cache.Indexer) EndpointSliceClusterLister {
	return &endpointSliceClusterLister{
		kcplisters.NewCluster[*discoveryv1.EndpointSlice](indexer, discoveryv1.Resource("endpointslice")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get EndpointSlices.
func (l *endpointSliceClusterLister) Cluster(clusterName logicalcluster.Name) listersdiscoveryv1.EndpointSliceLister {
	return &endpointSliceLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// endpointSliceLister can list all EndpointSlices inside a workspace
// or scope down to a listersdiscoveryv1.EndpointSliceNamespaceLister for one namespace.
type endpointSliceLister struct {
	kcplisters.ResourceIndexer[*discoveryv1.EndpointSlice]
}

var _ listersdiscoveryv1.EndpointSliceLister = new(endpointSliceLister)

// EndpointSlices returns an object that can list and get EndpointSlices in one namespace.
func (l *endpointSliceLister) EndpointSlices(namespace string) listersdiscoveryv1.EndpointSliceNamespaceLister {
	return &endpointSliceNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// endpointSliceNamespaceLister implements the listersdiscoveryv1.EndpointSliceNamespaceLister
// interface.
type endpointSliceNamespaceLister struct {
	kcplisters.ResourceIndexer[*discoveryv1.EndpointSlice]
}

var _ listersdiscoveryv1.EndpointSliceNamespaceLister = new(endpointSliceNamespaceLister)

// NewEndpointSliceLister returns a new EndpointSliceLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEndpointSliceLister(indexer cache.Indexer) listersdiscoveryv1.EndpointSliceLister {
	return &endpointSliceLister{
		kcplisters.New[*discoveryv1.EndpointSlice](indexer, discoveryv1.Resource("endpointslice")),
	}
}

// endpointSliceScopedLister can list all EndpointSlices inside a workspace
// or scope down to a listersdiscoveryv1.EndpointSliceNamespaceLister for one namespace.
type endpointSliceScopedLister struct {
	kcplisters.ResourceIndexer[*discoveryv1.EndpointSlice]
}

// EndpointSlices returns an object that can list and get EndpointSlices in one namespace.
func (l *endpointSliceScopedLister) EndpointSlices(namespace string) listersdiscoveryv1.EndpointSliceLister {
	return &endpointSliceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
