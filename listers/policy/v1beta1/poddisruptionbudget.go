/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/kcp-dev/logicalcluster/v3"

	policyv1beta1 "k8s.io/api/policy/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listerspolicyv1beta1 "k8s.io/client-go/listers/policy/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
)

// PodDisruptionBudgetClusterLister helps list PodDisruptionBudgets across all workspaces,
// or scope down to a PodDisruptionBudgetLister for one workspace.
// All objects returned here must be treated as read-only.
type PodDisruptionBudgetClusterLister interface {
	// List lists all PodDisruptionBudgets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*policyv1beta1.PodDisruptionBudget, err error)
	// Cluster returns a lister that can list and get PodDisruptionBudgets in one workspace.
	Cluster(clusterName logicalcluster.Name) listerspolicyv1beta1.PodDisruptionBudgetLister
	PodDisruptionBudgetClusterListerExpansion
}

// podDisruptionBudgetClusterLister implements the PodDisruptionBudgetClusterLister interface.
type podDisruptionBudgetClusterLister struct {
	kcplisters.ResourceClusterIndexer[*policyv1beta1.PodDisruptionBudget]
}

var _ PodDisruptionBudgetClusterLister = new(podDisruptionBudgetClusterLister)

// NewPodDisruptionBudgetClusterLister returns a new PodDisruptionBudgetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodDisruptionBudgetClusterLister(indexer cache.Indexer) PodDisruptionBudgetClusterLister {
	return &podDisruptionBudgetClusterLister{
		kcplisters.NewCluster[*policyv1beta1.PodDisruptionBudget](indexer, policyv1beta1.Resource("poddisruptionbudget")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get PodDisruptionBudgets.
func (l *podDisruptionBudgetClusterLister) Cluster(clusterName logicalcluster.Name) listerspolicyv1beta1.PodDisruptionBudgetLister {
	return &podDisruptionBudgetLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// podDisruptionBudgetLister can list all PodDisruptionBudgets inside a workspace
// or scope down to a listerspolicyv1beta1.PodDisruptionBudgetNamespaceLister for one namespace.
type podDisruptionBudgetLister struct {
	kcplisters.ResourceIndexer[*policyv1beta1.PodDisruptionBudget]
}

var _ listerspolicyv1beta1.PodDisruptionBudgetLister = new(podDisruptionBudgetLister)

// PodDisruptionBudgets returns an object that can list and get PodDisruptionBudgets in one namespace.
func (l *podDisruptionBudgetLister) PodDisruptionBudgets(namespace string) listerspolicyv1beta1.PodDisruptionBudgetNamespaceLister {
	return &podDisruptionBudgetNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// podDisruptionBudgetNamespaceLister implements the listerspolicyv1beta1.PodDisruptionBudgetNamespaceLister
// interface.
type podDisruptionBudgetNamespaceLister struct {
	kcplisters.ResourceIndexer[*policyv1beta1.PodDisruptionBudget]
}

var _ listerspolicyv1beta1.PodDisruptionBudgetNamespaceLister = new(podDisruptionBudgetNamespaceLister)

// NewPodDisruptionBudgetLister returns a new PodDisruptionBudgetLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewPodDisruptionBudgetLister(indexer cache.Indexer) listerspolicyv1beta1.PodDisruptionBudgetLister {
	return &podDisruptionBudgetLister{
		kcplisters.New[*policyv1beta1.PodDisruptionBudget](indexer, policyv1beta1.Resource("poddisruptionbudget")),
	}
}

// podDisruptionBudgetScopedLister can list all PodDisruptionBudgets inside a workspace
// or scope down to a listerspolicyv1beta1.PodDisruptionBudgetNamespaceLister for one namespace.
type podDisruptionBudgetScopedLister struct {
	kcplisters.ResourceIndexer[*policyv1beta1.PodDisruptionBudget]
}

// PodDisruptionBudgets returns an object that can list and get PodDisruptionBudgets in one namespace.
func (l *podDisruptionBudgetScopedLister) PodDisruptionBudgets(namespace string) listerspolicyv1beta1.PodDisruptionBudgetLister {
	return &podDisruptionBudgetLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
