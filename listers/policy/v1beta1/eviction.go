/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1beta1

import (
	policyv1beta1 "k8s.io/api/policy/v1beta1"
	"k8s.io/apimachinery/pkg/labels"
	listerspolicyv1beta1 "k8s.io/client-go/listers/policy/v1beta1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// EvictionClusterLister helps list Evictions across all workspaces,
// or scope down to a EvictionLister for one workspace.
// All objects returned here must be treated as read-only.
type EvictionClusterLister interface {
	// List lists all Evictions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*policyv1beta1.Eviction, err error)
	// Cluster returns a lister that can list and get Evictions in one workspace.
	Cluster(clusterName logicalcluster.Name) listerspolicyv1beta1.EvictionLister
	EvictionClusterListerExpansion
}

// evictionClusterLister implements the EvictionClusterLister interface.
type evictionClusterLister struct {
	kcplisters.ResourceClusterIndexer[*policyv1beta1.Eviction]
}

var _ EvictionClusterLister = new(evictionClusterLister)

// NewEvictionClusterLister returns a new EvictionClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEvictionClusterLister(indexer cache.Indexer) EvictionClusterLister {
	return &evictionClusterLister{
		kcplisters.NewCluster[*policyv1beta1.Eviction](indexer, policyv1beta1.Resource("eviction")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get Evictions.
func (l *evictionClusterLister) Cluster(clusterName logicalcluster.Name) listerspolicyv1beta1.EvictionLister {
	return &evictionLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// evictionLister can list all Evictions inside a workspace
// or scope down to a listerspolicyv1beta1.EvictionNamespaceLister for one namespace.
type evictionLister struct {
	kcplisters.ResourceIndexer[*policyv1beta1.Eviction]
}

var _ listerspolicyv1beta1.EvictionLister = new(evictionLister)

// Evictions returns an object that can list and get Evictions in one namespace.
func (l *evictionLister) Evictions(namespace string) listerspolicyv1beta1.EvictionNamespaceLister {
	return &evictionNamespaceLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}

// evictionNamespaceLister implements the listerspolicyv1beta1.EvictionNamespaceLister
// interface.
type evictionNamespaceLister struct {
	kcplisters.ResourceIndexer[*policyv1beta1.Eviction]
}

var _ listerspolicyv1beta1.EvictionNamespaceLister = new(evictionNamespaceLister)

// NewEvictionLister returns a new EvictionLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewEvictionLister(indexer cache.Indexer) listerspolicyv1beta1.EvictionLister {
	return &evictionLister{
		kcplisters.New[*policyv1beta1.Eviction](indexer, policyv1beta1.Resource("eviction")),
	}
}

// evictionScopedLister can list all Evictions inside a workspace
// or scope down to a listerspolicyv1beta1.EvictionNamespaceLister for one namespace.
type evictionScopedLister struct {
	kcplisters.ResourceIndexer[*policyv1beta1.Eviction]
}

// Evictions returns an object that can list and get Evictions in one namespace.
func (l *evictionScopedLister) Evictions(namespace string) listerspolicyv1beta1.EvictionLister {
	return &evictionLister{
		l.ResourceIndexer.WithNamespace(namespace),
	}
}
