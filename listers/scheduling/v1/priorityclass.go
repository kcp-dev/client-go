/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-lister-gen. DO NOT EDIT.

package v1

import (
	schedulingv1 "k8s.io/api/scheduling/v1"
	"k8s.io/apimachinery/pkg/labels"
	listersschedulingv1 "k8s.io/client-go/listers/scheduling/v1"
	"k8s.io/client-go/tools/cache"

	kcplisters "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/listers"
	"github.com/kcp-dev/logicalcluster/v3"
)

// PriorityClassClusterLister helps list PriorityClasses across all workspaces,
// or scope down to a PriorityClassLister for one workspace.
// All objects returned here must be treated as read-only.
type PriorityClassClusterLister interface {
	// List lists all PriorityClasses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1.PriorityClass, err error)
	// Cluster returns a lister that can list and get PriorityClasses in one workspace.
	Cluster(clusterName logicalcluster.Name) listersschedulingv1.PriorityClassLister
	PriorityClassClusterListerExpansion
}

// priorityClassClusterLister implements the PriorityClassClusterLister interface.
type priorityClassClusterLister struct {
	kcplisters.ResourceClusterIndexer[*schedulingv1.PriorityClass]
}

var _ PriorityClassClusterLister = new(priorityClassClusterLister)

// NewPriorityClassClusterLister returns a new PriorityClassClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPriorityClassClusterLister(indexer cache.Indexer) PriorityClassClusterLister {
	return &priorityClassClusterLister{
		kcplisters.NewCluster[*schedulingv1.PriorityClass](indexer, schedulingv1.Resource("priorityclass")),
	}
}

// Cluster scopes the lister to one workspace, allowing users to list and get PriorityClasses.
func (l *priorityClassClusterLister) Cluster(clusterName logicalcluster.Name) listersschedulingv1.PriorityClassLister {
	return &priorityClassLister{
		l.ResourceClusterIndexer.WithCluster(clusterName),
	}
}

// priorityClassLister can list all PriorityClasses inside a workspace
// or scope down to a listersschedulingv1.PriorityClassNamespaceLister for one namespace.
type priorityClassLister struct {
	kcplisters.ResourceIndexer[*schedulingv1.PriorityClass]
}

var _ listersschedulingv1.PriorityClassLister = new(priorityClassLister)

// NewPriorityClassLister returns a new PriorityClassLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPriorityClassLister(indexer cache.Indexer) listersschedulingv1.PriorityClassLister {
	return &priorityClassLister{
		kcplisters.New[*schedulingv1.PriorityClass](indexer, schedulingv1.Resource("priorityclass")),
	}
}

// priorityClassScopedLister can list all PriorityClasses inside a workspace
// or scope down to a listersschedulingv1.PriorityClassNamespaceLister.
type priorityClassScopedLister struct {
	kcplisters.ResourceIndexer[*schedulingv1.PriorityClass]
}
