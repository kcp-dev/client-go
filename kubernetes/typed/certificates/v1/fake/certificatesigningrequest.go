/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	certificatesv1 "k8s.io/api/certificates/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "k8s.io/client-go/applyconfigurations/certificates/v1"
	typedcertificatesv1 "k8s.io/client-go/kubernetes/typed/certificates/v1"

	typedkcpcertificatesv1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1"
	kcpgentype "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/gentype"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
	"github.com/kcp-dev/logicalcluster/v3"
)

// certificateSigningRequestClusterClient implements CertificateSigningRequestClusterInterface
type certificateSigningRequestClusterClient struct {
	*kcpgentype.FakeClusterClientWithList[*certificatesv1.CertificateSigningRequest, *certificatesv1.CertificateSigningRequestList]
	Fake *kcptesting.Fake
}

func newFakeCertificateSigningRequestClusterClient(fake *CertificatesV1ClusterClient) typedkcpcertificatesv1.CertificateSigningRequestClusterInterface {
	return &certificateSigningRequestClusterClient{
		kcpgentype.NewFakeClusterClientWithList[*certificatesv1.CertificateSigningRequest, *certificatesv1.CertificateSigningRequestList](
			fake.Fake,
			certificatesv1.SchemeGroupVersion.WithResource("certificatesigningrequests"),
			certificatesv1.SchemeGroupVersion.WithKind("CertificateSigningRequest"),
			func() *certificatesv1.CertificateSigningRequest { return &certificatesv1.CertificateSigningRequest{} },
			func() *certificatesv1.CertificateSigningRequestList {
				return &certificatesv1.CertificateSigningRequestList{}
			},
			func(dst, src *certificatesv1.CertificateSigningRequestList) { dst.ListMeta = src.ListMeta },
			func(list *certificatesv1.CertificateSigningRequestList) []*certificatesv1.CertificateSigningRequest {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *certificatesv1.CertificateSigningRequestList, items []*certificatesv1.CertificateSigningRequest) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake.Fake,
	}
}

func (c *certificateSigningRequestClusterClient) Cluster(cluster logicalcluster.Path) typedcertificatesv1.CertificateSigningRequestInterface {
	return newFakeCertificateSigningRequestClient(c.Fake, cluster)
}

// certificateSigningRequestScopedClient implements CertificateSigningRequestInterface
type certificateSigningRequestScopedClient struct {
	*kcpgentype.FakeClientWithListAndApply[*certificatesv1.CertificateSigningRequest, *certificatesv1.CertificateSigningRequestList, *v1.CertificateSigningRequestApplyConfiguration]
	Fake        *kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func newFakeCertificateSigningRequestClient(fake *kcptesting.Fake, clusterPath logicalcluster.Path) typedcertificatesv1.CertificateSigningRequestInterface {
	return &certificateSigningRequestScopedClient{
		kcpgentype.NewFakeClientWithListAndApply[*certificatesv1.CertificateSigningRequest, *certificatesv1.CertificateSigningRequestList, *v1.CertificateSigningRequestApplyConfiguration](
			fake,
			clusterPath,
			"",
			certificatesv1.SchemeGroupVersion.WithResource("certificatesigningrequests"),
			certificatesv1.SchemeGroupVersion.WithKind("CertificateSigningRequest"),
			func() *certificatesv1.CertificateSigningRequest { return &certificatesv1.CertificateSigningRequest{} },
			func() *certificatesv1.CertificateSigningRequestList {
				return &certificatesv1.CertificateSigningRequestList{}
			},
			func(dst, src *certificatesv1.CertificateSigningRequestList) { dst.ListMeta = src.ListMeta },
			func(list *certificatesv1.CertificateSigningRequestList) []*certificatesv1.CertificateSigningRequest {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *certificatesv1.CertificateSigningRequestList, items []*certificatesv1.CertificateSigningRequest) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake,
		clusterPath,
	}
}

// UpdateApproval takes the representation of a certificateSigningRequest and updates it. Returns the server's representation of the certificateSigningRequest, and an error, if there is any.
func (c *certificateSigningRequestScopedClient) UpdateApproval(ctx context.Context, certificateSigningRequestName string, certificateSigningRequest *certificatesv1.CertificateSigningRequest, _ metav1.UpdateOptions) (result *certificatesv1.CertificateSigningRequest, err error) {
	emptyResult := &certificatesv1.CertificateSigningRequest{}
	obj, err := c.Fake.Invokes(kcptesting.NewRootUpdateSubresourceAction(c.Resource(), c.ClusterPath, "approval", certificateSigningRequest), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*certificatesv1.CertificateSigningRequest), err
}
