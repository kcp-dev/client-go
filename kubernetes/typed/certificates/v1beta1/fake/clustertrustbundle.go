/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	certificatesv1beta1 "k8s.io/api/certificates/v1beta1"
	v1beta1 "k8s.io/client-go/applyconfigurations/certificates/v1beta1"
	typedcertificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"

	typedkcpcertificatesv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1beta1"
	kcpgentype "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/gentype"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
	"github.com/kcp-dev/logicalcluster/v3"
)

// clusterTrustBundleClusterClient implements ClusterTrustBundleClusterInterface
type clusterTrustBundleClusterClient struct {
	*kcpgentype.FakeClusterClientWithList[*certificatesv1beta1.ClusterTrustBundle, *certificatesv1beta1.ClusterTrustBundleList]
	Fake *kcptesting.Fake
}

func newFakeClusterTrustBundleClusterClient(fake *CertificatesV1beta1ClusterClient) typedkcpcertificatesv1beta1.ClusterTrustBundleClusterInterface {
	return &clusterTrustBundleClusterClient{
		kcpgentype.NewFakeClusterClientWithList[*certificatesv1beta1.ClusterTrustBundle, *certificatesv1beta1.ClusterTrustBundleList](
			fake.Fake,
			certificatesv1beta1.SchemeGroupVersion.WithResource("clustertrustbundles"),
			certificatesv1beta1.SchemeGroupVersion.WithKind("ClusterTrustBundle"),
			func() *certificatesv1beta1.ClusterTrustBundle { return &certificatesv1beta1.ClusterTrustBundle{} },
			func() *certificatesv1beta1.ClusterTrustBundleList {
				return &certificatesv1beta1.ClusterTrustBundleList{}
			},
			func(dst, src *certificatesv1beta1.ClusterTrustBundleList) { dst.ListMeta = src.ListMeta },
			func(list *certificatesv1beta1.ClusterTrustBundleList) []*certificatesv1beta1.ClusterTrustBundle {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *certificatesv1beta1.ClusterTrustBundleList, items []*certificatesv1beta1.ClusterTrustBundle) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake.Fake,
	}
}

func (c *clusterTrustBundleClusterClient) Cluster(cluster logicalcluster.Path) typedcertificatesv1beta1.ClusterTrustBundleInterface {
	return newFakeClusterTrustBundleClient(c.Fake, cluster)
}

// clusterTrustBundleScopedClient implements ClusterTrustBundleInterface
type clusterTrustBundleScopedClient struct {
	*kcpgentype.FakeClientWithListAndApply[*certificatesv1beta1.ClusterTrustBundle, *certificatesv1beta1.ClusterTrustBundleList, *v1beta1.ClusterTrustBundleApplyConfiguration]
	Fake        *kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func newFakeClusterTrustBundleClient(fake *kcptesting.Fake, clusterPath logicalcluster.Path) typedcertificatesv1beta1.ClusterTrustBundleInterface {
	return &clusterTrustBundleScopedClient{
		kcpgentype.NewFakeClientWithListAndApply[*certificatesv1beta1.ClusterTrustBundle, *certificatesv1beta1.ClusterTrustBundleList, *v1beta1.ClusterTrustBundleApplyConfiguration](
			fake,
			clusterPath,
			"",
			certificatesv1beta1.SchemeGroupVersion.WithResource("clustertrustbundles"),
			certificatesv1beta1.SchemeGroupVersion.WithKind("ClusterTrustBundle"),
			func() *certificatesv1beta1.ClusterTrustBundle { return &certificatesv1beta1.ClusterTrustBundle{} },
			func() *certificatesv1beta1.ClusterTrustBundleList {
				return &certificatesv1beta1.ClusterTrustBundleList{}
			},
			func(dst, src *certificatesv1beta1.ClusterTrustBundleList) { dst.ListMeta = src.ListMeta },
			func(list *certificatesv1beta1.ClusterTrustBundleList) []*certificatesv1beta1.ClusterTrustBundle {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *certificatesv1beta1.ClusterTrustBundleList, items []*certificatesv1beta1.ClusterTrustBundle) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake,
		clusterPath,
	}
}
