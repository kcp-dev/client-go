/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	"github.com/kcp-dev/logicalcluster/v3"

	apistoragev1alpha1 "k8s.io/api/storage/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"
)

// VolumeAttachmentsClusterGetter has a method to return a VolumeAttachmentClusterInterface.
// A group's cluster client should implement this interface.
type VolumeAttachmentsClusterGetter interface {
	VolumeAttachments() VolumeAttachmentClusterInterface
}

// VolumeAttachmentClusterInterface can operate on VolumeAttachments across all clusters,
// or scope down to one cluster and return a storagev1alpha1.VolumeAttachmentInterface.
type VolumeAttachmentClusterInterface interface {
	Cluster(logicalcluster.Path) storagev1alpha1.VolumeAttachmentInterface
	List(ctx context.Context, opts v1.ListOptions) (*apistoragev1alpha1.VolumeAttachmentList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	VolumeAttachmentClusterExpansion
}

type volumeAttachmentsClusterInterface struct {
	clientCache kcpclient.Cache[*storagev1alpha1.StorageV1alpha1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *volumeAttachmentsClusterInterface) Cluster(clusterPath logicalcluster.Path) storagev1alpha1.VolumeAttachmentInterface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return c.clientCache.ClusterOrDie(clusterPath).VolumeAttachments()
}

// List returns the entire collection of all VolumeAttachments across all clusters.
func (c *volumeAttachmentsClusterInterface) List(ctx context.Context, opts v1.ListOptions) (*apistoragev1alpha1.VolumeAttachmentList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).VolumeAttachments().List(ctx, opts)
}

// Watch begins to watch all VolumeAttachments across all clusters.
func (c *volumeAttachmentsClusterInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).VolumeAttachments().Watch(ctx, opts)
}
