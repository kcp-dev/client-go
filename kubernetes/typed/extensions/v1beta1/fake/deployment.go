/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	context "context"
	json "encoding/json"
	fmt "fmt"

	"github.com/kcp-dev/logicalcluster/v3"

	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	v1beta1 "k8s.io/client-go/applyconfigurations/extensions/v1beta1"
	typedextensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"

	typedkcpextensionsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/extensions/v1beta1"
	kcpgentype "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/gentype"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
)

// deploymentClusterClient implements DeploymentClusterInterface
type deploymentClusterClient struct {
	*kcpgentype.FakeClusterClientWithList[*extensionsv1beta1.Deployment, *extensionsv1beta1.DeploymentList]
	Fake *kcptesting.Fake
}

func newFakeDeploymentClusterClient(fake *ExtensionsV1beta1ClusterClient) typedkcpextensionsv1beta1.DeploymentClusterInterface {
	return &deploymentClusterClient{
		kcpgentype.NewFakeClusterClientWithList[*extensionsv1beta1.Deployment, *extensionsv1beta1.DeploymentList](
			fake.Fake,
			extensionsv1beta1.SchemeGroupVersion.WithResource("deployments"),
			extensionsv1beta1.SchemeGroupVersion.WithKind("Deployment"),
			func() *extensionsv1beta1.Deployment { return &extensionsv1beta1.Deployment{} },
			func() *extensionsv1beta1.DeploymentList { return &extensionsv1beta1.DeploymentList{} },
			func(dst, src *extensionsv1beta1.DeploymentList) { dst.ListMeta = src.ListMeta },
			func(list *extensionsv1beta1.DeploymentList) []*extensionsv1beta1.Deployment {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *extensionsv1beta1.DeploymentList, items []*extensionsv1beta1.Deployment) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake.Fake,
	}
}

func (c *deploymentClusterClient) Cluster(cluster logicalcluster.Path) typedkcpextensionsv1beta1.DeploymentsNamespacer {
	return &deploymentNamespacer{Fake: c.Fake, ClusterPath: cluster}
}

type deploymentNamespacer struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (n *deploymentNamespacer) Namespace(namespace string) typedextensionsv1beta1.DeploymentInterface {
	return newFakeDeploymentClient(n.Fake, namespace, n.ClusterPath)
}

// deploymentScopedClient implements DeploymentInterface
type deploymentScopedClient struct {
	*kcpgentype.FakeClientWithListAndApply[*extensionsv1beta1.Deployment, *extensionsv1beta1.DeploymentList, *v1beta1.DeploymentApplyConfiguration]
	Fake        *kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func newFakeDeploymentClient(fake *kcptesting.Fake, namespace string, clusterPath logicalcluster.Path) typedextensionsv1beta1.DeploymentInterface {
	return &deploymentScopedClient{
		kcpgentype.NewFakeClientWithListAndApply[*extensionsv1beta1.Deployment, *extensionsv1beta1.DeploymentList, *v1beta1.DeploymentApplyConfiguration](
			fake,
			clusterPath,
			namespace,
			extensionsv1beta1.SchemeGroupVersion.WithResource("deployments"),
			extensionsv1beta1.SchemeGroupVersion.WithKind("Deployment"),
			func() *extensionsv1beta1.Deployment { return &extensionsv1beta1.Deployment{} },
			func() *extensionsv1beta1.DeploymentList { return &extensionsv1beta1.DeploymentList{} },
			func(dst, src *extensionsv1beta1.DeploymentList) { dst.ListMeta = src.ListMeta },
			func(list *extensionsv1beta1.DeploymentList) []*extensionsv1beta1.Deployment {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *extensionsv1beta1.DeploymentList, items []*extensionsv1beta1.Deployment) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake,
		clusterPath,
	}
}

// GetScale takes name of the deployment, and returns the corresponding scale object, and an error if there is any.
func (c *deploymentScopedClient) GetScale(ctx context.Context, deploymentName string, _ v1.GetOptions) (result *extensionsv1beta1.Scale, err error) {
	emptyResult := &extensionsv1beta1.Scale{}
	obj, err := c.Fake.Invokes(kcptesting.NewGetSubresourceAction(c.Resource(), c.ClusterPath, c.Namespace(), "scale", deploymentName), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*extensionsv1beta1.Scale), err
}

// UpdateScale takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *deploymentScopedClient) UpdateScale(ctx context.Context, deploymentName string, scale *extensionsv1beta1.Scale, _ v1.UpdateOptions) (result *extensionsv1beta1.Scale, err error) {
	emptyResult := &extensionsv1beta1.Scale{}
	obj, err := c.Fake.Invokes(kcptesting.NewUpdateSubresourceAction(c.Resource(), c.ClusterPath, "scale", c.Namespace(), scale), &extensionsv1beta1.Scale{})
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*extensionsv1beta1.Scale), err
}

// ApplyScale takes top resource name and the apply declarative configuration for scale,
// applies it and returns the applied scale, and an error, if there is any.
func (c *deploymentScopedClient) ApplyScale(ctx context.Context, deploymentName string, scale *v1beta1.ScaleApplyConfiguration, _ v1.ApplyOptions) (result *extensionsv1beta1.Scale, err error) {
	if scale == nil {
		return nil, fmt.Errorf("scale provided to ApplyScale must not be nil")
	}
	data, err := json.Marshal(scale)
	if err != nil {
		return nil, err
	}
	emptyResult := &extensionsv1beta1.Scale{}
	obj, err := c.Fake.Invokes(kcptesting.NewPatchSubresourceAction(c.Resource(), c.ClusterPath, c.Namespace(), deploymentName, types.ApplyPatchType, data, "scale"), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*extensionsv1beta1.Scale), err
}
