/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/client-go/kubernetes/typed/core/v1"
	rest "k8s.io/client-go/rest"

	kcpcorev1 "github.com/kcp-dev/client-go/kubernetes/typed/core/v1"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
)

var _ kcpcorev1.CoreV1ClusterInterface = (*CoreV1ClusterClient)(nil)

type CoreV1ClusterClient struct {
	*kcptesting.Fake
}

func (c *CoreV1ClusterClient) Cluster(clusterPath logicalcluster.Path) corev1.CoreV1Interface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}
	return &CoreV1Client{Fake: c.Fake, ClusterPath: clusterPath}
}

func (c *CoreV1ClusterClient) ComponentStatuses() kcpcorev1.ComponentStatusClusterInterface {
	return newFakeComponentStatusClusterClient(c)
}

func (c *CoreV1ClusterClient) ConfigMaps() kcpcorev1.ConfigMapClusterInterface {
	return newFakeConfigMapClusterClient(c)
}

func (c *CoreV1ClusterClient) Endpoints() kcpcorev1.EndpointsClusterInterface {
	return newFakeEndpointsClusterClient(c)
}

func (c *CoreV1ClusterClient) Events() kcpcorev1.EventClusterInterface {
	return newFakeEventClusterClient(c)
}

func (c *CoreV1ClusterClient) LimitRanges() kcpcorev1.LimitRangeClusterInterface {
	return newFakeLimitRangeClusterClient(c)
}

func (c *CoreV1ClusterClient) Namespaces() kcpcorev1.NamespaceClusterInterface {
	return newFakeNamespaceClusterClient(c)
}

func (c *CoreV1ClusterClient) Nodes() kcpcorev1.NodeClusterInterface {
	return newFakeNodeClusterClient(c)
}

func (c *CoreV1ClusterClient) PersistentVolumes() kcpcorev1.PersistentVolumeClusterInterface {
	return newFakePersistentVolumeClusterClient(c)
}

func (c *CoreV1ClusterClient) PersistentVolumeClaims() kcpcorev1.PersistentVolumeClaimClusterInterface {
	return newFakePersistentVolumeClaimClusterClient(c)
}

func (c *CoreV1ClusterClient) Pods() kcpcorev1.PodClusterInterface {
	return newFakePodClusterClient(c)
}

func (c *CoreV1ClusterClient) PodTemplates() kcpcorev1.PodTemplateClusterInterface {
	return newFakePodTemplateClusterClient(c)
}

func (c *CoreV1ClusterClient) ReplicationControllers() kcpcorev1.ReplicationControllerClusterInterface {
	return newFakeReplicationControllerClusterClient(c)
}

func (c *CoreV1ClusterClient) ResourceQuotas() kcpcorev1.ResourceQuotaClusterInterface {
	return newFakeResourceQuotaClusterClient(c)
}

func (c *CoreV1ClusterClient) Secrets() kcpcorev1.SecretClusterInterface {
	return newFakeSecretClusterClient(c)
}

func (c *CoreV1ClusterClient) Services() kcpcorev1.ServiceClusterInterface {
	return newFakeServiceClusterClient(c)
}

func (c *CoreV1ClusterClient) ServiceAccounts() kcpcorev1.ServiceAccountClusterInterface {
	return newFakeServiceAccountClusterClient(c)
}

type CoreV1Client struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (c *CoreV1Client) ComponentStatuses() corev1.ComponentStatusInterface {
	return newFakeComponentStatusClient(c.Fake, c.ClusterPath)
}

func (c *CoreV1Client) ConfigMaps(namespace string) corev1.ConfigMapInterface {
	return newFakeConfigMapClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) Endpoints(namespace string) corev1.EndpointsInterface {
	return newFakeEndpointsClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) Events(namespace string) corev1.EventInterface {
	return newFakeEventClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) LimitRanges(namespace string) corev1.LimitRangeInterface {
	return newFakeLimitRangeClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) Namespaces() corev1.NamespaceInterface {
	return newFakeNamespaceClient(c.Fake, c.ClusterPath)
}

func (c *CoreV1Client) Nodes() corev1.NodeInterface {
	return newFakeNodeClient(c.Fake, c.ClusterPath)
}

func (c *CoreV1Client) PersistentVolumes() corev1.PersistentVolumeInterface {
	return newFakePersistentVolumeClient(c.Fake, c.ClusterPath)
}

func (c *CoreV1Client) PersistentVolumeClaims(namespace string) corev1.PersistentVolumeClaimInterface {
	return newFakePersistentVolumeClaimClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) Pods(namespace string) corev1.PodInterface {
	return newFakePodClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) PodTemplates(namespace string) corev1.PodTemplateInterface {
	return newFakePodTemplateClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) ReplicationControllers(namespace string) corev1.ReplicationControllerInterface {
	return newFakeReplicationControllerClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) ResourceQuotas(namespace string) corev1.ResourceQuotaInterface {
	return newFakeResourceQuotaClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) Secrets(namespace string) corev1.SecretInterface {
	return newFakeSecretClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) Services(namespace string) corev1.ServiceInterface {
	return newFakeServiceClient(c.Fake, namespace, c.ClusterPath)
}

func (c *CoreV1Client) ServiceAccounts(namespace string) corev1.ServiceAccountInterface {
	return newFakeServiceAccountClient(c.Fake, namespace, c.ClusterPath)
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CoreV1Client) RESTClient() rest.Interface {
	var ret *rest.RESTClient
	return ret
}
