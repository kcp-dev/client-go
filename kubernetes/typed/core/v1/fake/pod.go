/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	"github.com/kcp-dev/logicalcluster/v3"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
	typedcorev1 "k8s.io/client-go/kubernetes/typed/core/v1"

	typedkcpcorev1 "github.com/kcp-dev/client-go/kubernetes/typed/core/v1"
	kcpgentype "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/gentype"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
)

// podClusterClient implements PodClusterInterface
type podClusterClient struct {
	*kcpgentype.FakeClusterClientWithList[*corev1.Pod, *corev1.PodList]
	Fake *kcptesting.Fake
}

func newFakePodClusterClient(fake *CoreV1ClusterClient) typedkcpcorev1.PodClusterInterface {
	return &podClusterClient{
		kcpgentype.NewFakeClusterClientWithList[*corev1.Pod, *corev1.PodList](
			fake.Fake,
			corev1.SchemeGroupVersion.WithResource("pods"),
			corev1.SchemeGroupVersion.WithKind("Pod"),
			func() *corev1.Pod { return &corev1.Pod{} },
			func() *corev1.PodList { return &corev1.PodList{} },
			func(dst, src *corev1.PodList) { dst.ListMeta = src.ListMeta },
			func(list *corev1.PodList) []*corev1.Pod { return kcpgentype.ToPointerSlice(list.Items) },
			func(list *corev1.PodList, items []*corev1.Pod) { list.Items = kcpgentype.FromPointerSlice(items) },
		),
		fake.Fake,
	}
}

func (c *podClusterClient) Cluster(cluster logicalcluster.Path) typedkcpcorev1.PodsNamespacer {
	return &podNamespacer{Fake: c.Fake, ClusterPath: cluster}
}

type podNamespacer struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (n *podNamespacer) Namespace(namespace string) typedcorev1.PodInterface {
	return newFakePodClient(n.Fake, namespace, n.ClusterPath)
}

// podScopedClient implements PodInterface
type podScopedClient struct {
	*kcpgentype.FakeClientWithListAndApply[*corev1.Pod, *corev1.PodList, *v1.PodApplyConfiguration]
	Fake        *kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func newFakePodClient(fake *kcptesting.Fake, namespace string, clusterPath logicalcluster.Path) typedcorev1.PodInterface {
	return &podScopedClient{
		kcpgentype.NewFakeClientWithListAndApply[*corev1.Pod, *corev1.PodList, *v1.PodApplyConfiguration](
			fake,
			clusterPath,
			namespace,
			corev1.SchemeGroupVersion.WithResource("pods"),
			corev1.SchemeGroupVersion.WithKind("Pod"),
			func() *corev1.Pod { return &corev1.Pod{} },
			func() *corev1.PodList { return &corev1.PodList{} },
			func(dst, src *corev1.PodList) { dst.ListMeta = src.ListMeta },
			func(list *corev1.PodList) []*corev1.Pod { return kcpgentype.ToPointerSlice(list.Items) },
			func(list *corev1.PodList, items []*corev1.Pod) { list.Items = kcpgentype.FromPointerSlice(items) },
		),
		fake,
		clusterPath,
	}
}

// UpdateEphemeralContainers takes the representation of a pod and updates it. Returns the server's representation of the pod, and an error, if there is any.
func (c *podScopedClient) UpdateEphemeralContainers(ctx context.Context, podName string, pod *corev1.Pod, _ metav1.UpdateOptions) (result *corev1.Pod, err error) {
	emptyResult := &corev1.Pod{}
	obj, err := c.Fake.Invokes(kcptesting.NewUpdateSubresourceAction(c.Resource(), c.ClusterPath, "ephemeralcontainers", c.Namespace(), pod), &corev1.Pod{})
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*corev1.Pod), err
}

// UpdateResize takes the representation of a pod and updates it. Returns the server's representation of the pod, and an error, if there is any.
func (c *podScopedClient) UpdateResize(ctx context.Context, podName string, pod *corev1.Pod, _ metav1.UpdateOptions) (result *corev1.Pod, err error) {
	emptyResult := &corev1.Pod{}
	obj, err := c.Fake.Invokes(kcptesting.NewUpdateSubresourceAction(c.Resource(), c.ClusterPath, "resize", c.Namespace(), pod), &corev1.Pod{})
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*corev1.Pod), err
}
