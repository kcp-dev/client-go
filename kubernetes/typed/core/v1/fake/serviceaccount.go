/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	authenticationv1 "k8s.io/api/authentication/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
	typedcorev1 "k8s.io/client-go/kubernetes/typed/core/v1"

	typedkcpcorev1 "github.com/kcp-dev/client-go/kubernetes/typed/core/v1"
	kcpgentype "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/gentype"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
	"github.com/kcp-dev/logicalcluster/v3"
)

// serviceAccountClusterClient implements ServiceAccountClusterInterface
type serviceAccountClusterClient struct {
	*kcpgentype.FakeClusterClientWithList[*corev1.ServiceAccount, *corev1.ServiceAccountList]
	Fake *kcptesting.Fake
}

func newFakeServiceAccountClusterClient(fake *CoreV1ClusterClient) typedkcpcorev1.ServiceAccountClusterInterface {
	return &serviceAccountClusterClient{
		kcpgentype.NewFakeClusterClientWithList[*corev1.ServiceAccount, *corev1.ServiceAccountList](
			fake.Fake,
			corev1.SchemeGroupVersion.WithResource("serviceaccounts"),
			corev1.SchemeGroupVersion.WithKind("ServiceAccount"),
			func() *corev1.ServiceAccount { return &corev1.ServiceAccount{} },
			func() *corev1.ServiceAccountList { return &corev1.ServiceAccountList{} },
			func(dst, src *corev1.ServiceAccountList) { dst.ListMeta = src.ListMeta },
			func(list *corev1.ServiceAccountList) []*corev1.ServiceAccount {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *corev1.ServiceAccountList, items []*corev1.ServiceAccount) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake.Fake,
	}
}

func (c *serviceAccountClusterClient) Cluster(cluster logicalcluster.Path) typedkcpcorev1.ServiceAccountsNamespacer {
	return &serviceAccountNamespacer{Fake: c.Fake, ClusterPath: cluster}
}

type serviceAccountNamespacer struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (n *serviceAccountNamespacer) Namespace(namespace string) typedcorev1.ServiceAccountInterface {
	return newFakeServiceAccountClient(n.Fake, namespace, n.ClusterPath)
}

// serviceAccountScopedClient implements ServiceAccountInterface
type serviceAccountScopedClient struct {
	*kcpgentype.FakeClientWithListAndApply[*corev1.ServiceAccount, *corev1.ServiceAccountList, *v1.ServiceAccountApplyConfiguration]
	Fake        *kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func newFakeServiceAccountClient(fake *kcptesting.Fake, namespace string, clusterPath logicalcluster.Path) typedcorev1.ServiceAccountInterface {
	return &serviceAccountScopedClient{
		kcpgentype.NewFakeClientWithListAndApply[*corev1.ServiceAccount, *corev1.ServiceAccountList, *v1.ServiceAccountApplyConfiguration](
			fake,
			clusterPath,
			namespace,
			corev1.SchemeGroupVersion.WithResource("serviceaccounts"),
			corev1.SchemeGroupVersion.WithKind("ServiceAccount"),
			func() *corev1.ServiceAccount { return &corev1.ServiceAccount{} },
			func() *corev1.ServiceAccountList { return &corev1.ServiceAccountList{} },
			func(dst, src *corev1.ServiceAccountList) { dst.ListMeta = src.ListMeta },
			func(list *corev1.ServiceAccountList) []*corev1.ServiceAccount {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *corev1.ServiceAccountList, items []*corev1.ServiceAccount) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake,
		clusterPath,
	}
}

// CreateToken takes the representation of a tokenRequest and creates it. Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *serviceAccountScopedClient) CreateToken(ctx context.Context, serviceAccountName string, tokenRequest *authenticationv1.TokenRequest, _ metav1.CreateOptions) (result *authenticationv1.TokenRequest, err error) {
	emptyResult := &authenticationv1.TokenRequest{}
	obj, err := c.Fake.Invokes(kcptesting.NewCreateSubresourceAction(c.Resource(), c.ClusterPath, serviceAccountName, "token", c.Namespace(), tokenRequest), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*authenticationv1.TokenRequest), err
}
