/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	"github.com/kcp-dev/logicalcluster/v3"

	autoscalingv2 "k8s.io/api/autoscaling/v2"
	v2 "k8s.io/client-go/applyconfigurations/autoscaling/v2"
	typedautoscalingv2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2"

	typedkcpautoscalingv2 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2"
	kcpgentype "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/gentype"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
)

// horizontalPodAutoscalerClusterClient implements HorizontalPodAutoscalerClusterInterface
type horizontalPodAutoscalerClusterClient struct {
	*kcpgentype.FakeClusterClientWithList[*autoscalingv2.HorizontalPodAutoscaler, *autoscalingv2.HorizontalPodAutoscalerList]
	Fake *kcptesting.Fake
}

func newFakeHorizontalPodAutoscalerClusterClient(fake *AutoscalingV2ClusterClient) typedkcpautoscalingv2.HorizontalPodAutoscalerClusterInterface {
	return &horizontalPodAutoscalerClusterClient{
		kcpgentype.NewFakeClusterClientWithList[*autoscalingv2.HorizontalPodAutoscaler, *autoscalingv2.HorizontalPodAutoscalerList](
			fake.Fake,
			autoscalingv2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
			autoscalingv2.SchemeGroupVersion.WithKind("HorizontalPodAutoscaler"),
			func() *autoscalingv2.HorizontalPodAutoscaler { return &autoscalingv2.HorizontalPodAutoscaler{} },
			func() *autoscalingv2.HorizontalPodAutoscalerList { return &autoscalingv2.HorizontalPodAutoscalerList{} },
			func(dst, src *autoscalingv2.HorizontalPodAutoscalerList) { dst.ListMeta = src.ListMeta },
			func(list *autoscalingv2.HorizontalPodAutoscalerList) []*autoscalingv2.HorizontalPodAutoscaler {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *autoscalingv2.HorizontalPodAutoscalerList, items []*autoscalingv2.HorizontalPodAutoscaler) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake.Fake,
	}
}

func (c *horizontalPodAutoscalerClusterClient) Cluster(cluster logicalcluster.Path) typedkcpautoscalingv2.HorizontalPodAutoscalersNamespacer {
	return &horizontalPodAutoscalerNamespacer{Fake: c.Fake, ClusterPath: cluster}
}

type horizontalPodAutoscalerNamespacer struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (n *horizontalPodAutoscalerNamespacer) Namespace(namespace string) typedautoscalingv2.HorizontalPodAutoscalerInterface {
	return newFakeHorizontalPodAutoscalerClient(n.Fake, namespace, n.ClusterPath)
}

// horizontalPodAutoscalerScopedClient implements HorizontalPodAutoscalerInterface
type horizontalPodAutoscalerScopedClient struct {
	*kcpgentype.FakeClientWithListAndApply[*autoscalingv2.HorizontalPodAutoscaler, *autoscalingv2.HorizontalPodAutoscalerList, *v2.HorizontalPodAutoscalerApplyConfiguration]
	Fake        *kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func newFakeHorizontalPodAutoscalerClient(fake *kcptesting.Fake, namespace string, clusterPath logicalcluster.Path) typedautoscalingv2.HorizontalPodAutoscalerInterface {
	return &horizontalPodAutoscalerScopedClient{
		kcpgentype.NewFakeClientWithListAndApply[*autoscalingv2.HorizontalPodAutoscaler, *autoscalingv2.HorizontalPodAutoscalerList, *v2.HorizontalPodAutoscalerApplyConfiguration](
			fake,
			clusterPath,
			namespace,
			autoscalingv2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
			autoscalingv2.SchemeGroupVersion.WithKind("HorizontalPodAutoscaler"),
			func() *autoscalingv2.HorizontalPodAutoscaler { return &autoscalingv2.HorizontalPodAutoscaler{} },
			func() *autoscalingv2.HorizontalPodAutoscalerList { return &autoscalingv2.HorizontalPodAutoscalerList{} },
			func(dst, src *autoscalingv2.HorizontalPodAutoscalerList) { dst.ListMeta = src.ListMeta },
			func(list *autoscalingv2.HorizontalPodAutoscalerList) []*autoscalingv2.HorizontalPodAutoscaler {
				return kcpgentype.ToPointerSlice(list.Items)
			},
			func(list *autoscalingv2.HorizontalPodAutoscalerList, items []*autoscalingv2.HorizontalPodAutoscaler) {
				list.Items = kcpgentype.FromPointerSlice(items)
			},
		),
		fake,
		clusterPath,
	}
}
