/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package fake

import (
	"github.com/kcp-dev/logicalcluster/v3"

	admissionregistrationv1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"
	rest "k8s.io/client-go/rest"

	kcpadmissionregistrationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1alpha1"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
)

var _ kcpadmissionregistrationv1alpha1.AdmissionregistrationV1alpha1ClusterInterface = (*AdmissionregistrationV1alpha1ClusterClient)(nil)

type AdmissionregistrationV1alpha1ClusterClient struct {
	*kcptesting.Fake
}

func (c *AdmissionregistrationV1alpha1ClusterClient) Cluster(clusterPath logicalcluster.Path) admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}
	return &AdmissionregistrationV1alpha1Client{Fake: c.Fake, ClusterPath: clusterPath}
}

func (c *AdmissionregistrationV1alpha1ClusterClient) MutatingAdmissionPolicies() kcpadmissionregistrationv1alpha1.MutatingAdmissionPolicyClusterInterface {
	return newFakeMutatingAdmissionPolicyClusterClient(c)
}

func (c *AdmissionregistrationV1alpha1ClusterClient) MutatingAdmissionPolicyBindings() kcpadmissionregistrationv1alpha1.MutatingAdmissionPolicyBindingClusterInterface {
	return newFakeMutatingAdmissionPolicyBindingClusterClient(c)
}

func (c *AdmissionregistrationV1alpha1ClusterClient) ValidatingAdmissionPolicies() kcpadmissionregistrationv1alpha1.ValidatingAdmissionPolicyClusterInterface {
	return newFakeValidatingAdmissionPolicyClusterClient(c)
}

func (c *AdmissionregistrationV1alpha1ClusterClient) ValidatingAdmissionPolicyBindings() kcpadmissionregistrationv1alpha1.ValidatingAdmissionPolicyBindingClusterInterface {
	return newFakeValidatingAdmissionPolicyBindingClusterClient(c)
}

type AdmissionregistrationV1alpha1Client struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (c *AdmissionregistrationV1alpha1Client) MutatingAdmissionPolicies() admissionregistrationv1alpha1.MutatingAdmissionPolicyInterface {
	return newFakeMutatingAdmissionPolicyClient(c.Fake, c.ClusterPath)
}

func (c *AdmissionregistrationV1alpha1Client) MutatingAdmissionPolicyBindings() admissionregistrationv1alpha1.MutatingAdmissionPolicyBindingInterface {
	return newFakeMutatingAdmissionPolicyBindingClient(c.Fake, c.ClusterPath)
}

func (c *AdmissionregistrationV1alpha1Client) ValidatingAdmissionPolicies() admissionregistrationv1alpha1.ValidatingAdmissionPolicyInterface {
	return newFakeValidatingAdmissionPolicyClient(c.Fake, c.ClusterPath)
}

func (c *AdmissionregistrationV1alpha1Client) ValidatingAdmissionPolicyBindings() admissionregistrationv1alpha1.ValidatingAdmissionPolicyBindingInterface {
	return newFakeValidatingAdmissionPolicyBindingClient(c.Fake, c.ClusterPath)
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *AdmissionregistrationV1alpha1Client) RESTClient() rest.Interface {
	var ret *rest.RESTClient
	return ret
}
