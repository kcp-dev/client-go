/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package informers

import (
	reflect "reflect"
	sync "sync"
	time "time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	clientgoinformers "k8s.io/client-go/informers"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpadmissionregistration "github.com/kcp-dev/client-go/informers/admissionregistration"
	kcpapiserverinternal "github.com/kcp-dev/client-go/informers/apiserverinternal"
	kcpapps "github.com/kcp-dev/client-go/informers/apps"
	kcpautoscaling "github.com/kcp-dev/client-go/informers/autoscaling"
	kcpbatch "github.com/kcp-dev/client-go/informers/batch"
	kcpcertificates "github.com/kcp-dev/client-go/informers/certificates"
	kcpcoordination "github.com/kcp-dev/client-go/informers/coordination"
	kcpcore "github.com/kcp-dev/client-go/informers/core"
	kcpdiscovery "github.com/kcp-dev/client-go/informers/discovery"
	kcpevents "github.com/kcp-dev/client-go/informers/events"
	kcpextensions "github.com/kcp-dev/client-go/informers/extensions"
	kcpflowcontrol "github.com/kcp-dev/client-go/informers/flowcontrol"
	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpnetworking "github.com/kcp-dev/client-go/informers/networking"
	kcpnode "github.com/kcp-dev/client-go/informers/node"
	kcppolicy "github.com/kcp-dev/client-go/informers/policy"
	kcprbac "github.com/kcp-dev/client-go/informers/rbac"
	kcpresource "github.com/kcp-dev/client-go/informers/resource"
	kcpscheduling "github.com/kcp-dev/client-go/informers/scheduling"
	kcpstorage "github.com/kcp-dev/client-go/informers/storage"
	kcpstoragemigration "github.com/kcp-dev/client-go/informers/storagemigration"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
)

// SharedInformerOption defines the functional option type for SharedInformerFactory.
type SharedInformerOption func(*SharedInformerOptions) *SharedInformerOptions

type SharedInformerOptions struct {
	customResync     map[reflect.Type]time.Duration
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
	transform        cache.TransformFunc
	namespace        string
}

type sharedInformerFactory struct {
	client           kcpkubernetes.ClusterInterface
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
	lock             sync.Mutex
	defaultResync    time.Duration
	customResync     map[reflect.Type]time.Duration
	transform        cache.TransformFunc

	informers map[reflect.Type]kcpcache.ScopeableSharedIndexInformer
	// startedInformers is used for tracking which informers have been started.
	// This allows Start() to be called multiple times safely.
	startedInformers map[reflect.Type]bool
	// wg tracks how many goroutines were started.
	wg sync.WaitGroup
	// shuttingDown is true when Shutdown has been called. It may still be running
	// because it needs to wait for goroutines.
	shuttingDown bool
}

// WithCustomResyncConfig sets a custom resync period for the specified informer types.
func WithCustomResyncConfig(resyncConfig map[v1.Object]time.Duration) SharedInformerOption {
	return func(opts *SharedInformerOptions) *SharedInformerOptions {
		for k, v := range resyncConfig {
			opts.customResync[reflect.TypeOf(k)] = v
		}
		return opts
	}
}

// WithTweakListOptions sets a custom filter on all listers of the configured SharedInformerFactory.
func WithTweakListOptions(tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) SharedInformerOption {
	return func(opts *SharedInformerOptions) *SharedInformerOptions {
		opts.tweakListOptions = tweakListOptions
		return opts
	}
}

// WithTransform sets a transform on all informers.
func WithTransform(transform cache.TransformFunc) SharedInformerOption {
	return func(opts *SharedInformerOptions) *SharedInformerOptions {
		opts.transform = transform
		return opts
	}
}

// NewSharedInformerFactory constructs a new instance of sharedInformerFactory for all namespaces.
func NewSharedInformerFactory(client kcpkubernetes.ClusterInterface, defaultResync time.Duration) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync)
}

// NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory.
// Listers obtained via this SharedInformerFactory will be subject to the same filters
// as specified here.
// Deprecated: Please use NewSharedInformerFactoryWithOptions instead
func NewFilteredSharedInformerFactory(client kcpkubernetes.ClusterInterface, defaultResync time.Duration, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync, WithTweakListOptions(tweakListOptions))
}

// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
func NewSharedInformerFactoryWithOptions(client kcpkubernetes.ClusterInterface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory {
	factory := &sharedInformerFactory{
		client:           client,
		defaultResync:    defaultResync,
		informers:        make(map[reflect.Type]kcpcache.ScopeableSharedIndexInformer),
		startedInformers: make(map[reflect.Type]bool),
		customResync:     make(map[reflect.Type]time.Duration),
	}

	opts := &SharedInformerOptions{
		customResync: make(map[reflect.Type]time.Duration),
	}

	// Apply all options
	for _, opt := range options {
		opts = opt(opts)
	}

	// Forward options to the factory
	factory.customResync = opts.customResync
	factory.tweakListOptions = opts.tweakListOptions
	factory.transform = opts.transform

	return factory
}

func (f *sharedInformerFactory) Start(stopCh <-chan struct{}) {
	f.lock.Lock()
	defer f.lock.Unlock()

	if f.shuttingDown {
		return
	}

	for informerType, informer := range f.informers {
		if !f.startedInformers[informerType] {
			f.wg.Add(1)
			// We need a new variable in each loop iteration,
			// otherwise the goroutine would use the loop variable
			// and that keeps changing.
			informer := informer
			go func() {
				defer f.wg.Done()
				informer.Run(stopCh)
			}()
			f.startedInformers[informerType] = true
		}
	}
}

func (f *sharedInformerFactory) Shutdown() {
	f.lock.Lock()
	f.shuttingDown = true
	f.lock.Unlock()

	// Will return immediately if there is nothing to wait for.
	f.wg.Wait()
}

func (f *sharedInformerFactory) WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool {
	informers := func() map[reflect.Type]kcpcache.ScopeableSharedIndexInformer {
		f.lock.Lock()
		defer f.lock.Unlock()

		informers := map[reflect.Type]kcpcache.ScopeableSharedIndexInformer{}
		for informerType, informer := range f.informers {
			if f.startedInformers[informerType] {
				informers[informerType] = informer
			}
		}
		return informers
	}()

	res := map[reflect.Type]bool{}
	for informType, informer := range informers {
		res[informType] = cache.WaitForCacheSync(stopCh, informer.HasSynced)
	}

	return res
}

// InformerFor returns the ScopeableSharedIndexInformer for obj using an internal client.
func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc kcpinternalinterfaces.NewInformerFunc) kcpcache.ScopeableSharedIndexInformer {
	f.lock.Lock()
	defer f.lock.Unlock()

	informerType := reflect.TypeOf(obj)
	informer, exists := f.informers[informerType]
	if exists {
		return informer
	}

	resyncPeriod, exists := f.customResync[informerType]
	if !exists {
		resyncPeriod = f.defaultResync
	}

	informer = newFunc(f.client, resyncPeriod)
	informer.SetTransform(f.transform)
	f.informers[informerType] = informer

	return informer
}

type ScopedDynamicSharedInformerFactory interface {
	// ForResource gives generic access to a shared informer of the matching type.
	ForResource(resource schema.GroupVersionResource) (clientgoinformers.GenericInformer, error)

	// Start initializes all requested informers. They are handled in goroutines
	// which run until the stop channel gets closed.
	Start(stopCh <-chan struct{})
}

// SharedInformerFactory provides shared informers for resources in all known
// API group versions.
//
// It is typically used like this:
//
//	ctx, cancel := context.Background()
//	defer cancel()
//	factory := NewSharedInformerFactory(client, resyncPeriod)
//	defer factory.WaitForStop()    // Returns immediately if nothing was started.
//	genericInformer := factory.ForResource(resource)
//	typedInformer := factory.SomeAPIGroup().V1().SomeType()
//	factory.Start(ctx.Done())      // Start processing these informers.
//	synced := factory.WaitForCacheSync(ctx.Done())
//	for v, ok := range synced {
//	    if !ok {
//	        fmt.Fprintf(os.Stderr, "caches failed to sync: %v", v)
//	        return
//	    }
//	}
//
//	// Creating informers can also be created after Start, but then
//	// Start must be called again:
//	anotherGenericInformer := factory.ForResource(resource)
//	factory.Start(ctx.Done())
type SharedInformerFactory interface {
	kcpinternalinterfaces.SharedInformerFactory

	Cluster(logicalcluster.Name) ScopedDynamicSharedInformerFactory

	// Start initializes all requested informers. They are handled in goroutines
	// which run until the stop channel gets closed.
	// Warning: Start does not block. When run in a go-routine, it will race with a later WaitForCacheSync.
	Start(stopCh <-chan struct{})

	// Shutdown marks a factory as shutting down. At that point no new
	// informers can be started anymore and Start will return without
	// doing anything.
	//
	// In addition, Shutdown blocks until all goroutines have terminated. For that
	// to happen, the close channel(s) that they were started with must be closed,
	// either before Shutdown gets called or while it is waiting.
	//
	// Shutdown may be called multiple times, even concurrently. All such calls will
	// block until all goroutines have terminated.
	Shutdown()

	// WaitForCacheSync blocks until all started informers' caches were synced
	// or the stop channel gets closed.
	WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool

	// ForResource gives generic access to a shared informer of the matching type.
	ForResource(resource schema.GroupVersionResource) (GenericClusterInformer, error)

	// InformerFor returns the SharedIndexInformer for obj using an internal
	// client.
	InformerFor(obj runtime.Object, newFunc kcpinternalinterfaces.NewInformerFunc) kcpcache.ScopeableSharedIndexInformer

	Admissionregistration() kcpadmissionregistration.ClusterInterface
	Internal() kcpapiserverinternal.ClusterInterface
	Apps() kcpapps.ClusterInterface
	Autoscaling() kcpautoscaling.ClusterInterface
	Batch() kcpbatch.ClusterInterface
	Certificates() kcpcertificates.ClusterInterface
	Coordination() kcpcoordination.ClusterInterface
	Core() kcpcore.ClusterInterface
	Discovery() kcpdiscovery.ClusterInterface
	Events() kcpevents.ClusterInterface
	Extensions() kcpextensions.ClusterInterface
	Flowcontrol() kcpflowcontrol.ClusterInterface
	Networking() kcpnetworking.ClusterInterface
	Node() kcpnode.ClusterInterface
	Policy() kcppolicy.ClusterInterface
	Rbac() kcprbac.ClusterInterface
	Resource() kcpresource.ClusterInterface
	Scheduling() kcpscheduling.ClusterInterface
	Storage() kcpstorage.ClusterInterface
	Storagemigration() kcpstoragemigration.ClusterInterface
}

func (f *sharedInformerFactory) Admissionregistration() kcpadmissionregistration.ClusterInterface {
	return kcpadmissionregistration.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Internal() kcpapiserverinternal.ClusterInterface {
	return kcpapiserverinternal.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Apps() kcpapps.ClusterInterface {
	return kcpapps.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Autoscaling() kcpautoscaling.ClusterInterface {
	return kcpautoscaling.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Batch() kcpbatch.ClusterInterface {
	return kcpbatch.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Certificates() kcpcertificates.ClusterInterface {
	return kcpcertificates.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Coordination() kcpcoordination.ClusterInterface {
	return kcpcoordination.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Core() kcpcore.ClusterInterface {
	return kcpcore.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Discovery() kcpdiscovery.ClusterInterface {
	return kcpdiscovery.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Events() kcpevents.ClusterInterface {
	return kcpevents.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Extensions() kcpextensions.ClusterInterface {
	return kcpextensions.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Flowcontrol() kcpflowcontrol.ClusterInterface {
	return kcpflowcontrol.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Networking() kcpnetworking.ClusterInterface {
	return kcpnetworking.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Node() kcpnode.ClusterInterface {
	return kcpnode.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Policy() kcppolicy.ClusterInterface {
	return kcppolicy.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Rbac() kcprbac.ClusterInterface {
	return kcprbac.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Resource() kcpresource.ClusterInterface {
	return kcpresource.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Scheduling() kcpscheduling.ClusterInterface {
	return kcpscheduling.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Storage() kcpstorage.ClusterInterface {
	return kcpstorage.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Storagemigration() kcpstoragemigration.ClusterInterface {
	return kcpstoragemigration.New(f, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cluster(clusterName logicalcluster.Name) ScopedDynamicSharedInformerFactory {
	return &scopedDynamicSharedInformerFactory{
		sharedInformerFactory: f,
		clusterName:           clusterName,
	}
}

type scopedDynamicSharedInformerFactory struct {
	*sharedInformerFactory
	clusterName logicalcluster.Name
}

func (f *scopedDynamicSharedInformerFactory) ForResource(resource schema.GroupVersionResource) (clientgoinformers.GenericInformer, error) {
	clusterInformer, err := f.sharedInformerFactory.ForResource(resource)
	if err != nil {
		return nil, err
	}
	return clusterInformer.Cluster(f.clusterName), nil
}

func (f *scopedDynamicSharedInformerFactory) Start(stopCh <-chan struct{}) {
	f.sharedInformerFactory.Start(stopCh)
}
