/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1beta2

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	apiappsv1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	appsv1beta2 "k8s.io/client-go/informers/apps/v1beta2"
	listersappsv1beta2 "k8s.io/client-go/listers/apps/v1beta2"
	cache "k8s.io/client-go/tools/cache"

	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1beta2 "github.com/kcp-dev/client-go/listers/apps/v1beta2"
)

// ReplicaSetClusterInformer provides access to a shared informer and lister for
// ReplicaSets.
type ReplicaSetClusterInformer interface {
	Cluster(logicalcluster.Name) appsv1beta2.ReplicaSetInformer
	ClusterWithContext(context.Context, logicalcluster.Name) appsv1beta2.ReplicaSetInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1beta2.ReplicaSetClusterLister
}

type replicaSetClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewReplicaSetClusterInformer constructs a new informer for ReplicaSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewReplicaSetClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredReplicaSetClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredReplicaSetClusterInformer constructs a new informer for ReplicaSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredReplicaSetClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AppsV1beta2().ReplicaSets().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AppsV1beta2().ReplicaSets().Watch(context.Background(), options)
			},
		},
		&apiappsv1beta2.ReplicaSet{},
		resyncPeriod,
		indexers,
	)
}

func (i *replicaSetClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredReplicaSetClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *replicaSetClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiappsv1beta2.ReplicaSet{}, i.defaultInformer)
}

func (i *replicaSetClusterInformer) Lister() kcpv1beta2.ReplicaSetClusterLister {
	return kcpv1beta2.NewReplicaSetClusterLister(i.Informer().GetIndexer())
}

func (i *replicaSetClusterInformer) Cluster(clusterName logicalcluster.Name) appsv1beta2.ReplicaSetInformer {
	return &replicaSetInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *replicaSetClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) appsv1beta2.ReplicaSetInformer {
	return &replicaSetInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type replicaSetInformer struct {
	informer cache.SharedIndexInformer
	lister   listersappsv1beta2.ReplicaSetLister
}

func (i *replicaSetInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *replicaSetInformer) Lister() listersappsv1beta2.ReplicaSetLister {
	return i.lister
}
