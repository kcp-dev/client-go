/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1beta2

import (
	context "context"
	time "time"

	apiappsv1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	appsv1beta2 "k8s.io/client-go/informers/apps/v1beta2"
	listersappsv1beta2 "k8s.io/client-go/listers/apps/v1beta2"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1beta2 "github.com/kcp-dev/client-go/listers/apps/v1beta2"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
)

// StatefulSetClusterInformer provides access to a shared informer and lister for
// StatefulSets.
type StatefulSetClusterInformer interface {
	Cluster(logicalcluster.Name) appsv1beta2.StatefulSetInformer
	ClusterWithContext(context.Context, logicalcluster.Name) appsv1beta2.StatefulSetInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1beta2.StatefulSetClusterLister
}

type statefulSetClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewStatefulSetClusterInformer constructs a new informer for StatefulSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewStatefulSetClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredStatefulSetClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredStatefulSetClusterInformer constructs a new informer for StatefulSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredStatefulSetClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AppsV1beta2().StatefulSets().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.AppsV1beta2().StatefulSets().Watch(context.Background(), options)
			},
		},
		&apiappsv1beta2.StatefulSet{},
		resyncPeriod,
		indexers,
	)
}

func (i *statefulSetClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredStatefulSetClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *statefulSetClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiappsv1beta2.StatefulSet{}, i.defaultInformer)
}

func (i *statefulSetClusterInformer) Lister() kcpv1beta2.StatefulSetClusterLister {
	return kcpv1beta2.NewStatefulSetClusterLister(i.Informer().GetIndexer())
}

func (i *statefulSetClusterInformer) Cluster(clusterName logicalcluster.Name) appsv1beta2.StatefulSetInformer {
	return &statefulSetInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *statefulSetClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) appsv1beta2.StatefulSetInformer {
	return &statefulSetInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type statefulSetInformer struct {
	informer cache.SharedIndexInformer
	lister   listersappsv1beta2.StatefulSetLister
}

func (i *statefulSetInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *statefulSetInformer) Lister() listersappsv1beta2.StatefulSetLister {
	return i.lister
}
