/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	apiapiserverinternalv1alpha1 "k8s.io/api/apiserverinternal/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	apiserverinternalv1alpha1 "k8s.io/client-go/informers/apiserverinternal/v1alpha1"
	listersapiserverinternalv1alpha1 "k8s.io/client-go/listers/apiserverinternal/v1alpha1"
	cache "k8s.io/client-go/tools/cache"

	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1alpha1 "github.com/kcp-dev/client-go/listers/apiserverinternal/v1alpha1"
)

// StorageVersionClusterInformer provides access to a shared informer and lister for
// StorageVersions.
type StorageVersionClusterInformer interface {
	Cluster(logicalcluster.Name) apiserverinternalv1alpha1.StorageVersionInformer
	ClusterWithContext(context.Context, logicalcluster.Name) apiserverinternalv1alpha1.StorageVersionInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.StorageVersionClusterLister
}

type storageVersionClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewStorageVersionClusterInformer constructs a new informer for StorageVersion type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewStorageVersionClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredStorageVersionClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredStorageVersionClusterInformer constructs a new informer for StorageVersion type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredStorageVersionClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.InternalV1alpha1().StorageVersions().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.InternalV1alpha1().StorageVersions().Watch(context.Background(), options)
			},
		},
		&apiapiserverinternalv1alpha1.StorageVersion{},
		resyncPeriod,
		indexers,
	)
}

func (i *storageVersionClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredStorageVersionClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *storageVersionClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apiapiserverinternalv1alpha1.StorageVersion{}, i.defaultInformer)
}

func (i *storageVersionClusterInformer) Lister() kcpv1alpha1.StorageVersionClusterLister {
	return kcpv1alpha1.NewStorageVersionClusterLister(i.Informer().GetIndexer())
}

func (i *storageVersionClusterInformer) Cluster(clusterName logicalcluster.Name) apiserverinternalv1alpha1.StorageVersionInformer {
	return &storageVersionInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *storageVersionClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) apiserverinternalv1alpha1.StorageVersionInformer {
	return &storageVersionInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type storageVersionInformer struct {
	informer cache.SharedIndexInformer
	lister   listersapiserverinternalv1alpha1.StorageVersionLister
}

func (i *storageVersionInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *storageVersionInformer) Lister() listersapiserverinternalv1alpha1.StorageVersionLister {
	return i.lister
}
