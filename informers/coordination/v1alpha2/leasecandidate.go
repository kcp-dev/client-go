/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha2

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	apicoordinationv1alpha2 "k8s.io/api/coordination/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	coordinationv1alpha2 "k8s.io/client-go/informers/coordination/v1alpha2"
	listerscoordinationv1alpha2 "k8s.io/client-go/listers/coordination/v1alpha2"
	cache "k8s.io/client-go/tools/cache"

	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1alpha2 "github.com/kcp-dev/client-go/listers/coordination/v1alpha2"
)

// LeaseCandidateClusterInformer provides access to a shared informer and lister for
// LeaseCandidates.
type LeaseCandidateClusterInformer interface {
	Cluster(logicalcluster.Name) coordinationv1alpha2.LeaseCandidateInformer
	ClusterWithContext(context.Context, logicalcluster.Name) coordinationv1alpha2.LeaseCandidateInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha2.LeaseCandidateClusterLister
}

type leaseCandidateClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewLeaseCandidateClusterInformer constructs a new informer for LeaseCandidate type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewLeaseCandidateClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredLeaseCandidateClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredLeaseCandidateClusterInformer constructs a new informer for LeaseCandidate type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredLeaseCandidateClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoordinationV1alpha2().LeaseCandidates().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoordinationV1alpha2().LeaseCandidates().Watch(context.Background(), options)
			},
		},
		&apicoordinationv1alpha2.LeaseCandidate{},
		resyncPeriod,
		indexers,
	)
}

func (i *leaseCandidateClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredLeaseCandidateClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *leaseCandidateClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apicoordinationv1alpha2.LeaseCandidate{}, i.defaultInformer)
}

func (i *leaseCandidateClusterInformer) Lister() kcpv1alpha2.LeaseCandidateClusterLister {
	return kcpv1alpha2.NewLeaseCandidateClusterLister(i.Informer().GetIndexer())
}

func (i *leaseCandidateClusterInformer) Cluster(clusterName logicalcluster.Name) coordinationv1alpha2.LeaseCandidateInformer {
	return &leaseCandidateInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *leaseCandidateClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) coordinationv1alpha2.LeaseCandidateInformer {
	return &leaseCandidateInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type leaseCandidateInformer struct {
	informer cache.SharedIndexInformer
	lister   listerscoordinationv1alpha2.LeaseCandidateLister
}

func (i *leaseCandidateInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *leaseCandidateInformer) Lister() listerscoordinationv1alpha2.LeaseCandidateLister {
	return i.lister
}
