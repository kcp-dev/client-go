/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	apistoragev1 "k8s.io/api/storage/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	storagev1 "k8s.io/client-go/informers/storage/v1"
	listersstoragev1 "k8s.io/client-go/listers/storage/v1"
	cache "k8s.io/client-go/tools/cache"

	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1 "github.com/kcp-dev/client-go/listers/storage/v1"
)

// VolumeAttachmentClusterInformer provides access to a shared informer and lister for
// VolumeAttachments.
type VolumeAttachmentClusterInformer interface {
	Cluster(logicalcluster.Name) storagev1.VolumeAttachmentInformer
	ClusterWithContext(context.Context, logicalcluster.Name) storagev1.VolumeAttachmentInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1.VolumeAttachmentClusterLister
}

type volumeAttachmentClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewVolumeAttachmentClusterInformer constructs a new informer for VolumeAttachment type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVolumeAttachmentClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredVolumeAttachmentClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVolumeAttachmentClusterInformer constructs a new informer for VolumeAttachment type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVolumeAttachmentClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1().VolumeAttachments().List(context.Background(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1().VolumeAttachments().Watch(context.Background(), options)
			},
		},
		&apistoragev1.VolumeAttachment{},
		resyncPeriod,
		indexers,
	)
}

func (i *volumeAttachmentClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredVolumeAttachmentClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *volumeAttachmentClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apistoragev1.VolumeAttachment{}, i.defaultInformer)
}

func (i *volumeAttachmentClusterInformer) Lister() kcpv1.VolumeAttachmentClusterLister {
	return kcpv1.NewVolumeAttachmentClusterLister(i.Informer().GetIndexer())
}

func (i *volumeAttachmentClusterInformer) Cluster(clusterName logicalcluster.Name) storagev1.VolumeAttachmentInformer {
	return &volumeAttachmentInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *volumeAttachmentClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) storagev1.VolumeAttachmentInformer {
	return &volumeAttachmentInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type volumeAttachmentInformer struct {
	informer cache.SharedIndexInformer
	lister   listersstoragev1.VolumeAttachmentLister
}

func (i *volumeAttachmentInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *volumeAttachmentInformer) Lister() listersstoragev1.VolumeAttachmentLister {
	return i.lister
}
