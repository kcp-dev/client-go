/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	apistoragev1beta1 "k8s.io/api/storage/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	storagev1beta1 "k8s.io/client-go/informers/storage/v1beta1"
	listersstoragev1beta1 "k8s.io/client-go/listers/storage/v1beta1"
	cache "k8s.io/client-go/tools/cache"

	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1beta1 "github.com/kcp-dev/client-go/listers/storage/v1beta1"
)

// StorageClassClusterInformer provides access to a shared informer and lister for
// StorageClasses.
type StorageClassClusterInformer interface {
	Cluster(logicalcluster.Name) storagev1beta1.StorageClassInformer
	ClusterWithContext(context.Context, logicalcluster.Name) storagev1beta1.StorageClassInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1beta1.StorageClassClusterLister
}

type storageClassClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewStorageClassClusterInformer constructs a new informer for StorageClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewStorageClassClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredStorageClassClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredStorageClassClusterInformer constructs a new informer for StorageClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredStorageClassClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1beta1().StorageClasses().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1beta1().StorageClasses().Watch(context.Background(), options)
			},
		},
		&apistoragev1beta1.StorageClass{},
		resyncPeriod,
		indexers,
	)
}

func (i *storageClassClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredStorageClassClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *storageClassClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apistoragev1beta1.StorageClass{}, i.defaultInformer)
}

func (i *storageClassClusterInformer) Lister() kcpv1beta1.StorageClassClusterLister {
	return kcpv1beta1.NewStorageClassClusterLister(i.Informer().GetIndexer())
}

func (i *storageClassClusterInformer) Cluster(clusterName logicalcluster.Name) storagev1beta1.StorageClassInformer {
	return &storageClassInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *storageClassClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) storagev1beta1.StorageClassInformer {
	return &storageClassInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type storageClassInformer struct {
	informer cache.SharedIndexInformer
	lister   listersstoragev1beta1.StorageClassLister
}

func (i *storageClassInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *storageClassInformer) Lister() listersstoragev1beta1.StorageClassLister {
	return i.lister
}
