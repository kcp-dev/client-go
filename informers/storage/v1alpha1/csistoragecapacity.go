/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apistoragev1alpha1 "k8s.io/api/storage/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	storagev1alpha1 "k8s.io/client-go/informers/storage/v1alpha1"
	listersstoragev1alpha1 "k8s.io/client-go/listers/storage/v1alpha1"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1alpha1 "github.com/kcp-dev/client-go/listers/storage/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
)

// CSIStorageCapacityClusterInformer provides access to a shared informer and lister for
// CSIStorageCapacities.
type CSIStorageCapacityClusterInformer interface {
	Cluster(logicalcluster.Name) storagev1alpha1.CSIStorageCapacityInformer
	ClusterWithContext(context.Context, logicalcluster.Name) storagev1alpha1.CSIStorageCapacityInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.CSIStorageCapacityClusterLister
}

type cSIStorageCapacityClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewCSIStorageCapacityClusterInformer constructs a new informer for CSIStorageCapacity type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewCSIStorageCapacityClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredCSIStorageCapacityClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredCSIStorageCapacityClusterInformer constructs a new informer for CSIStorageCapacity type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredCSIStorageCapacityClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1alpha1().CSIStorageCapacities().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.StorageV1alpha1().CSIStorageCapacities().Watch(context.Background(), options)
			},
		},
		&apistoragev1alpha1.CSIStorageCapacity{},
		resyncPeriod,
		indexers,
	)
}

func (i *cSIStorageCapacityClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredCSIStorageCapacityClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *cSIStorageCapacityClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apistoragev1alpha1.CSIStorageCapacity{}, i.defaultInformer)
}

func (i *cSIStorageCapacityClusterInformer) Lister() kcpv1alpha1.CSIStorageCapacityClusterLister {
	return kcpv1alpha1.NewCSIStorageCapacityClusterLister(i.Informer().GetIndexer())
}

func (i *cSIStorageCapacityClusterInformer) Cluster(clusterName logicalcluster.Name) storagev1alpha1.CSIStorageCapacityInformer {
	return &cSIStorageCapacityInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *cSIStorageCapacityClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) storagev1alpha1.CSIStorageCapacityInformer {
	return &cSIStorageCapacityInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type cSIStorageCapacityInformer struct {
	informer cache.SharedIndexInformer
	lister   listersstoragev1alpha1.CSIStorageCapacityLister
}

func (i *cSIStorageCapacityInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *cSIStorageCapacityInformer) Lister() listersstoragev1alpha1.CSIStorageCapacityLister {
	return i.lister
}
