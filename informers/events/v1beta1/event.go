/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"

	apieventsv1beta1 "k8s.io/api/events/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	eventsv1beta1 "k8s.io/client-go/informers/events/v1beta1"
	listerseventsv1beta1 "k8s.io/client-go/listers/events/v1beta1"
	cache "k8s.io/client-go/tools/cache"

	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1beta1 "github.com/kcp-dev/client-go/listers/events/v1beta1"
)

// EventClusterInformer provides access to a shared informer and lister for
// Events.
type EventClusterInformer interface {
	Cluster(logicalcluster.Name) eventsv1beta1.EventInformer
	ClusterWithContext(context.Context, logicalcluster.Name) eventsv1beta1.EventInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1beta1.EventClusterLister
}

type eventClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewEventClusterInformer constructs a new informer for Event type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEventClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEventClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredEventClusterInformer constructs a new informer for Event type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredEventClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EventsV1beta1().Events().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.EventsV1beta1().Events().Watch(context.Background(), options)
			},
		},
		&apieventsv1beta1.Event{},
		resyncPeriod,
		indexers,
	)
}

func (i *eventClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredEventClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *eventClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apieventsv1beta1.Event{}, i.defaultInformer)
}

func (i *eventClusterInformer) Lister() kcpv1beta1.EventClusterLister {
	return kcpv1beta1.NewEventClusterLister(i.Informer().GetIndexer())
}

func (i *eventClusterInformer) Cluster(clusterName logicalcluster.Name) eventsv1beta1.EventInformer {
	return &eventInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *eventClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) eventsv1beta1.EventInformer {
	return &eventInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type eventInformer struct {
	informer cache.SharedIndexInformer
	lister   listerseventsv1beta1.EventLister
}

func (i *eventInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *eventInformer) Lister() listerseventsv1beta1.EventLister {
	return i.lister
}
