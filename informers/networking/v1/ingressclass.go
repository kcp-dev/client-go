/*
Copyright 2025 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1

import (
	context "context"
	time "time"

	apinetworkingv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	networkingv1 "k8s.io/client-go/informers/networking/v1"
	listersnetworkingv1 "k8s.io/client-go/listers/networking/v1"
	cache "k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcpinternalinterfaces "github.com/kcp-dev/client-go/informers/internalinterfaces"
	kcpkubernetes "github.com/kcp-dev/client-go/kubernetes"
	kcpv1 "github.com/kcp-dev/client-go/listers/networking/v1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
)

// IngressClassClusterInformer provides access to a shared informer and lister for
// IngressClasses.
type IngressClassClusterInformer interface {
	Cluster(logicalcluster.Name) networkingv1.IngressClassInformer
	ClusterWithContext(context.Context, logicalcluster.Name) networkingv1.IngressClassInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1.IngressClassClusterLister
}

type ingressClassClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewIngressClassClusterInformer constructs a new informer for IngressClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewIngressClassClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredIngressClassClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredIngressClassClusterInformer constructs a new informer for IngressClass type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredIngressClassClusterInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NetworkingV1().IngressClasses().List(context.Background(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.NetworkingV1().IngressClasses().Watch(context.Background(), options)
			},
		},
		&apinetworkingv1.IngressClass{},
		resyncPeriod,
		indexers,
	)
}

func (i *ingressClassClusterInformer) defaultInformer(client kcpkubernetes.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredIngressClassClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *ingressClassClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&apinetworkingv1.IngressClass{}, i.defaultInformer)
}

func (i *ingressClassClusterInformer) Lister() kcpv1.IngressClassClusterLister {
	return kcpv1.NewIngressClassClusterLister(i.Informer().GetIndexer())
}

func (i *ingressClassClusterInformer) Cluster(clusterName logicalcluster.Name) networkingv1.IngressClassInformer {
	return &ingressClassInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *ingressClassClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) networkingv1.IngressClassInformer {
	return &ingressClassInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type ingressClassInformer struct {
	informer cache.SharedIndexInformer
	lister   listersnetworkingv1.IngressClassLister
}

func (i *ingressClassInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *ingressClassInformer) Lister() listersnetworkingv1.IngressClassLister {
	return i.lister
}
